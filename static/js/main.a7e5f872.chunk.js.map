{"version":3,"sources":["firebase.js","components/Header.js","components/TaskBoardMenu.js","components/TaskForm.js","components/TaskItem.js","components/TaskList.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","clearTaskboard","numOfTasks","className","onClick","disabled","TaskBoardMenu","props","handleChange","searchTerms","type","name","id","value","onChange","defaultChecked","htmlFor","placeholder","icon","faSearch","aria-hidden","TaskForm","handleSubmit","handleBlur","addTask","taskValue","removeTask","toggleForm","action","onSubmit","onBlur","TaskItem","evt","currentTarget","setTimeout","contains","document","activeElement","setState","isEditing","target","handleEditSubmit","preventDefault","editTask","state","taskFormInput","handleMovePrev","moveTask","status","handleMoveNext","toggleEdit","task","input","querySelector","this","autosize","focus","faChevronLeft","onFocus","tabIndex","faChevronRight","Component","TaskList","isStaging","handleStagingTask","e","stagingTask","toggleTaskStaging","handleAddTask","statusString","tasks","length","map","key","Footer","href","rel","App","newTask","database","ref","remove","push","updateTask","newValue","update","child","direction","dbRef","taskStatus","currentIdx","indexOf","newIdx","taskItems","handleSearch","searchString","RegExp","searchItems","filter","test","listFilter","on","response","tasksData","val","taskItem","open","inProgress","complete","items","lists","idx","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a7e5f872.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// *** USE YOUR CONFIG OBJECT ***\n// Initialize Firebase\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDBqq9f4CwQkWmvi0jA9or1uqWUTx73r_E\",\n  authDomain: \"andre-facey-project-five.firebaseapp.com\",\n  databaseURL: \"https://andre-facey-project-five.firebaseio.com\",\n  projectId: \"andre-facey-project-five\",\n  storageBucket: \"andre-facey-project-five.appspot.com\",\n  messagingSenderId: \"940406876843\",\n  appId: \"1:940406876843:web:d25925e9d0cc096f1b65ee\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React from 'react';\n\nconst Header = ({clearTaskboard, numOfTasks}) => (\n  <header>\n    <div className=\"wrapper displayContainer\">\n      <div className=\"header__text\">\n        <h1>Task Board</h1>\n        <p>Add and track tasks to increase productivity!</p>\n      </div>\n      <button onClick={clearTaskboard}  className=\"btn btn--black btn__taskBoard btn__taskBoard--clear\" disabled={ numOfTasks ? \"\" : \"disabled\" }>Clear Task Board</button>\n    </div>\n  </header>\n)\n\nexport default Header;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nconst TaskBoardMenu = props => {\n  const { handleChange, searchTerms } = props;\n\n  return(\n    <section className=\"taskBoard__menu\">\n\n      <div className=\"inputContainer__filter\">\n        {/* <h4>Lists: </h4> */}\n        <input type=\"radio\" className=\"srOnly\" name=\"listFilter\" id=\"filterAll\" value=\"all\" onChange={handleChange} defaultChecked />\n        <label className=\"btn btn--orange\" htmlFor=\"filterAll\">All</label>\n        \n        <input type=\"radio\" className=\"srOnly\" name=\"listFilter\" id=\"filterOpen\" value=\"open\" onChange={handleChange} />\n        <label className=\"btn btn--red\" htmlFor=\"filterOpen\">Open</label>\n        \n        <input type=\"radio\" className=\"srOnly\" name=\"listFilter\" id=\"filterInProgress\" value=\"inProgress\" onChange={handleChange} />\n        <label className=\"btn btn--blue\" htmlFor=\"filterInProgress\">In Progress</label>\n        \n        <input type=\"radio\" className=\"srOnly\" name=\"listFilter\" id=\"filterComplete\" value=\"complete\" onChange={handleChange} />\n        <label className=\"btn btn--green\" htmlFor=\"filterComplete\">Complete</label>\n      </div>\n\n      <div className=\"inputContainer__searchBar\">\n        <input className=\"taskBoard__searchBar\" type=\"text\" name=\"searchTerms\" id=\"seachTerms\" placeholder=\"search\" onChange={handleChange} value={searchTerms} />\n        {/* TODO style to pad the text to the right to prevent the icon overlapping */}\n        <FontAwesomeIcon className=\"taskBoard__searchBarIcon\" icon={faSearch} aria-hidden=\"true\"/>\n      </div>\n\n    </section>\n  )\n}\n\nexport default TaskBoardMenu;","import React from 'react';\n\nconst TaskForm = props => {\n  const { id, type, handleSubmit, handleBlur, handleChange, addTask, taskValue, removeTask, toggleForm } = props;\n\n  return (\n    <>\n    <h3 className=\"taskForm__heading\">{type === 'edit' ? 'Edit Task' : 'New Task'}</h3>\n    <form action=\"#\" onSubmit={handleSubmit} onBlur={handleBlur} className=\"taskForm clearfix\">\n      <textarea className=\"taskForm__input\" id={`taskFormInput_${id}`} name=\"taskFormInput\" onChange={handleChange} value={taskValue}></textarea>\n      <button className=\"btn btn--green\">Save</button>\n      <button type=\"button\" onClick={toggleForm} className=\"btn btn--orange\">Cancel</button>\n      {type === \"add\" && <button type=\"button\" onClick={addTask} className=\"btn__task btn__task--add\">Add</button>}\n      {type === \"edit\" && <button type=\"button\" onClick={removeTask} className=\"btn btn--red\">Delete</button>}\n    </form>  \n    </>\n  );\n}\n\nexport default TaskForm;","import React, { Component} from 'react';\nimport TaskForm from './TaskForm.js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons';\nimport autosize from 'autosize';\n\nclass TaskItem extends Component {\n  constructor(props) {\n    super()\n\n    this.state = {\n      taskFormInput: props.task,\n      isEditing: false,\n    }\n  }\n  \n  // --------------------------- componentDidUpdate\n  componentDidUpdate() {\n    const input = document.querySelector(`#taskFormInput_${this.props.id}`);\n    if (input) {\n      autosize(input);\n\n      // set the cursor to the end of the text input by setting value to \"\" > focus > value back to state.taskFormInput\n      input.value = \"\";\n      input.focus();\n      input.value = this.state.taskFormInput;\n    } \n\n  }\n\n  // --------------------------- handleBlur\n  handleBlur = (evt) => {\n    // implementation from https://gist.github.com/pstoica/4323d3e6e37e8a23dd59\n    const currentTarget = evt.currentTarget;\n\n    // Check the newly focused element in the next tick of the event loop\n    setTimeout(() => {\n      // Check if the new activeElement is a child of the original container\n      if (!currentTarget.contains(document.activeElement)) {\n        // You can invoke a callback or add custom logic here\n        this.setState({isEditing: false});\n      }\n    }, 0);\n  }\n\n  // --------------------------- handleChange\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    })\n  }\n\n  // --------------------------- handleEditSubmit\n  handleEditSubmit = (evt) => {\n    evt.preventDefault();\n  \n    this.props.editTask(this.props.id, this.state.taskFormInput);\n    \n    this.setState({isEditing: false});\n  }\n\n  // --------------------------- handleMovePrev\n  handleMovePrev = () => this.props.moveTask(this.props.id, this.props.status, -1);\n  // --------------------------- handleMoveNext\n  handleMoveNext = () => this.props.moveTask(this.props.id, this.props.status, 1);\n\n  // --------------------------- removeTask\n  removeTask = () => this.props.removeTask(this.props.id);\n  \n  // --------------------------- toggleEdit\n  toggleEdit = () => this.setState({ isEditing: !this.state.isEditing });\n\n  // --------------------------- render\n  render() {\n\n    const { id, task, status } = this.props;\n  \n    return(\n      <li className={`taskItem taskItem--${status}`} >\n      \n      {\n        status !== 'open' \n        &&\n        <button className=\"taskItem__btn taskItem__btn--prev\" onClick={this.handleMovePrev}>\n          <FontAwesomeIcon icon={faChevronLeft} aria-hidden=\"true\" />\n          <span className=\"srOnly\">Click to move task to the previous status</span>\n        </button>\n      }\n    \n    { \n      !this.state.isEditing \n        ? <p className=\"taskItem__text\" onClick={this.toggleEdit} onFocus={this.toggleEdit} tabIndex=\"0\">{task}</p> \n        : <TaskForm \n            id={id}\n            type=\"edit\"\n            handleSubmit={this.handleEditSubmit} \n            handleBlur={this.handleBlur} \n            handleChange={this.handleChange}\n            taskValue={this.state.taskFormInput}\n            removeTask={this.removeTask}\n            toggleForm={this.toggleEdit}\n          />\n    }\n      \n    {\n      status !== \"complete\" \n      &&\n      <button className=\"taskItem__btn taskItem__btn--next\" onClick={this.handleMoveNext}>\n        <FontAwesomeIcon icon={faChevronRight} aria-hidden=\"true\"/>\n        <span className=\"srOnly\">Click to move task to the next status</span>\n      </button>\n    }\n    </li>\n    ) \n  }\n}\n\nexport default TaskItem;","import React, { Component } from 'react';\nimport TaskItem from './TaskItem';\nimport TaskForm from './TaskForm';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEllipsisV } from '@fortawesome/free-solid-svg-icons';\nimport autosize from 'autosize';\n\nclass TaskList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isStaging: false,\n      stagingTask: \"\",\n    }\n  }\n\n  // --------------------------- componentDidUpdate\n  componentDidUpdate() {\n    const input = document.querySelector(`#taskFormInput_${this.props.status}`);\n    if (input) {\n      autosize(input);\n      input.focus();\n    } \n  }\n\n  // --------------------------- handleBlur\n  handleBlur = (evt) => {\n    // implementation from https://gist.github.com/pstoica/4323d3e6e37e8a23dd59\n    const currentTarget = evt.currentTarget;\n\n    // Check the newly focused element in the next tick of the event loop\n    setTimeout(() => {\n      // Check if the new activeElement is a child of the original container\n      if (!currentTarget.contains(document.activeElement)) {\n        // You can invoke a callback or add custom logic here\n        this.setState({isStaging: false});\n      }\n    }, 0);\n  }\n\n  // --------------------------- handleStagingTask\n  handleStagingTask = (e) => this.setState({stagingTask: e.target.value});\n  // --------------------------- toggleTaskStaging\n  toggleTaskStaging = () => this.setState({isStaging: !this.state.isStaging});\n\n  // --------------------------- handleAddTask\n  handleAddTask = (e) => {\n    e.preventDefault();\n\n    // prevent adding empty tasks\n    if (this.state.stagingTask) {\n\n      const { stagingTask: task } = this.state;\n      const { status } = this.props;\n\n      this.props.addTask({\n        task,\n        status\n      })\n\n      // reset staging states\n      this.setState({\n        isStaging: false, \n        stagingTask: \"\",\n      });\n    }\n    \n  }\n  \n  // --------------------------- render\n  render() {\n    const { status, statusString, tasks, editTask, removeTask, moveTask } = this.props;\n  \n    return(\n      <div className=\"taskList\">\n        <h2 className={`taskList__heading taskList__heading--${status} clearfix`}>\n          {/* TODO keep ellipsis button? */}\n          {/* <button className=\"taskList__menuBtn\"><FontAwesomeIcon icon={faEllipsisV} /></button> */}\n          {statusString} \n          {tasks.length > 0 && <span className=\"taskList__count\">{tasks.length}</span>}\n          <button onClick={this.toggleTaskStaging} className={`btn taskList__addBtn`}>+ Task</button>\n        </h2>\n        <ul className=\"taskList__list\">\n          { \n            this.state.isStaging && \n            <li className={`taskItem taskItem--${status}`}>\n              <TaskForm \n                id={status}\n                taskValue={this.state.stagingTask}\n                handleSubmit={this.handleAddTask}\n                toggleForm={this.toggleTaskStaging}\n                handleBlur={this.handleBlur}\n                handleChange={this.handleStagingTask}\n              />\n            </li>\n          }\n          { \n            this.props.tasks.map(({key, task, status}) => (\n              <TaskItem \n                key={key} \n                id={key} \n                task={task} \n                status={status} \n                editTask={editTask}\n                removeTask={removeTask} \n                moveTask={moveTask} />)\n            )\n          }\n        </ul>\n      </div>\n    )\n\n  }\n\n}\nexport default TaskList;","import React from 'react'\n\nconst Footer = () => (\n  <footer>\n    <div className=\"wrapper displayContainer\">\n      <p>Copyright 2020</p> \n      <p>Created By <a href=\"https://andrefacey.com\">Andre Facey</a> at <a href=\"https://junocollege.com\" target=\"_blank\" rel=\"noopener noreferrer\">Juno College</a></p>\n      <p>Design Inspiration from <a href=\"https://scottrs.ca\" target=\"_blank\" rel=\"noopener noreferrer\">Scott Sobere-Yu</a> and <a href=\"https://dribbble.com/shots/6250762-Kanban-Board\" target=\"_blank\" rel=\"noopener noreferrer\">Nikita</a></p>\n    </div>\n  </footer>\n);\n\nexport default Footer;","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport Header from './components/Header.js';\nimport TaskBoardMenu from './components/TaskBoardMenu.js';\nimport TaskList from './components/TaskList.js';\nimport Footer from './components/Footer.js';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n      taskStatus: ['open', 'inProgress', 'complete'],\n      taskItems: [],\n      listFilter: \"all\",\n      searchTerms: \"\",\n      searchItems: []\n    }\n  }\n\n  // --------------------------- componentDidMount\n  componentDidMount() {\n    // db reference of \"tasks\"\n    const dbRef = firebase.database().ref(\"tasks\");\n\n    // listener for any value change on the db reference\n    dbRef.on('value', response => {\n      const tasksData = response.val();\n      \n      // create empty array to store data retrieved from db later\n      const taskItems = [];\n      for (const key in tasksData) {\n        const taskItem = {\n          key: key,\n          task: tasksData[key].task,\n          status: tasksData[key].status\n        }\n        taskItems.push(taskItem);\n      }\n      \n      // update state with the taskItems retrieved from the database\n      this.setState({taskItems});\n    });\n  }\n\n  // --------------------------- clearTaskboard\n  clearTaskboard = (newTask) => firebase.database().ref(\"tasks\").remove();\n\n  // --------------------------- addTask\n  addTask = (newTask) => firebase.database().ref(\"tasks\").push(newTask);\n  \n  // --------------------------- updateTask\n  updateTask = (key, newValue) => firebase.database().ref('tasks/' + key).update({task: newValue});\n\n  // --------------------------- removeTask\n  removeTask = (key) => firebase.database().ref('tasks').child(key).remove();\n\n  // --------------------------- moveTask\n  moveTask = (key, status, direction) => {\n    const dbRef = firebase.database().ref('tasks/' + key);\n    const { taskStatus } = this.state;\n\n    // find current status index\n    const currentIdx = taskStatus.indexOf(status);\n\n    // store new index as the value of currentIdx + the direction (1 or - 1)\n    let newIdx = currentIdx + direction;\n\n    // prevent out of range indexes of the taskStatus array\n    // if newIdx < 0 - set to 0, if newIdx gte taskStatus length - set to last item in array, otherwise keep the value\n    newIdx = newIdx < 0 ? 0 : newIdx >= taskStatus.length ? taskStatus.length - 1 : newIdx;\n\n    // if task has a new position update it in the database\n    newIdx !== currentIdx && dbRef.update({status: taskStatus[newIdx]});\n  }\n\n  // --------------------------- handleChange\n  handleChange = (evt) => {\n    const { name, value } = evt.target;\n    \n    // call handleSearch if the input searchTerms input was changed and there are tasks\n    if (name === 'searchTerms' && this.state.taskItems.length) {\n      this.setState({[name]: value}, this.handleSearch);\n      // this.handleSearch();\n    }\n    else { \n      this.setState({[name]: value});\n    }\n  }\n\n  // --------------------------- handleSearch\n  handleSearch = () => {\n    const { searchTerms, taskItems }= this.state;\n    // create regex for search terms globall/case insensistive\n    const searchString = new RegExp(searchTerms, 'i');\n\n    // filter out tasks by test against search terms\n    const searchItems = taskItems.filter(({task}) => searchString.test(task));\n\n    // store filtered results into searchItems state to preserve the state of the taskItems\n    this.setState({searchItems});\n  }\n\n  // --------------------------- render\n  render() {\n    // heading text for task status lists\n    const statusString = {\n      open: \"Open\",\n      inProgress: \"In Progress\",\n      complete: \"Completed\"\n    } \n    const { addTask, moveTask, removeTask, updateTask, handleChange, clearTaskboard, } = this;\n    const { taskStatus, taskItems, listFilter, searchItems, searchTerms } = this.state;\n    \n    const items = !searchTerms.length ? taskItems : searchItems;\n    const lists = listFilter === 'all' ? taskStatus : [listFilter];\n\n    return (\n      <div className=\"pageContainer\">\n        {/* START of HEADER */}\n        <Header clearTaskboard={clearTaskboard} numOfTasks={taskItems.length} />\n        \n        {/* START of MAIN */}\n        <main>\n          <div className=\"wrapper\">\n            <TaskBoardMenu \n              clearTaskboard={clearTaskboard}\n              handleChange={handleChange}\n              searchTerms={searchTerms}\n            />\n            \n            <section className=\"taskLists\">\n              { \n                lists.map((status, idx) => {\n                  const tasks = items.filter(task => task.status === status);\n                  return (\n                    <TaskList \n                      className=\"taskList\" \n                      key={idx} \n                      status={status}\n                      statusString={statusString[status]}\n                      tasks={tasks} \n                      addTask={addTask}\n                      moveTask={moveTask}\n                      removeTask={removeTask}\n                      editTask={updateTask}\n                    />\n                  )\n                })\n              } \n            </section>\n          </div>\n        </main>\n\n        {/* START of FOOTER */}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}