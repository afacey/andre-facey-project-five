{"version":3,"sources":["contexts/ThemeContext.tsx","firebase.tsx","contexts/UserContext.tsx","contexts/TasksContext.tsx","components/Settings.tsx","components/Header.tsx","components/TaskBoardMenu.tsx","components/TaskForm.tsx","components/TaskItem.tsx","components/TaskList.tsx","components/TaskLists.tsx","components/Footer.tsx","App.tsx","index.tsx"],"names":["ThemeContext","React","ThemeProvider","children","value","theme","setTheme","Provider","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","UserContext","UserProvider","dbRef","loggedIn","user","setUser","checkForUser","setCheckForUser","auth","onAuthStateChanged","uid","signInUser","provider","GoogleAuthProvider","signInWithPopup","then","catch","error","Swal","fire","title","text","icon","confirmButtonText","logoutUser","signOut","TasksContext","TasksProvider","loadComplete","setLoadComplete","taskItems","setTaskItems","listFilter","setListFilter","searchTerms","setSearchTerms","searchItems","setSearchItems","fetchTasks","database","ref","on","response","tasksData","val","key","taskItem","task","status","push","retrieveTaskItems","searchString","RegExp","filter","test","items","length","taskStatus","numOfTasks","Settings","useContext","className","onClick","remove","disabled","type","name","id","onChange","defaultChecked","htmlFor","Header","openSettingsMenu","setOpenSettingsMenu","faTimes","faChevronDown","TaskBoardMenu","changeListFilter","placeholder","evt","target","aria-hidden","faSearch","TaskForm","props","taskValue","closeForm","useState","taskInput","setTaskInput","useEffect","textInput","document","querySelector","activeElement","autosize","focus","action","onSubmit","newValue","preventDefault","update","newTask","addTask","onBlur","currentTarget","setTimeout","contains","child","TaskItem","isEditing","setIsEditing","changeStatus","direction","newIdx","indexOf","moveTask","toggleEdit","faChevronLeft","onFocus","faChevronRight","TaskList","tasks","isStaging","setIsStaging","menuEnabled","setMenuEnabled","toggleTaskStaging","faBars","open","inProgress","complete","taskListItems","reduce","deleteList","clearTaskList","map","TaskLists","Footer","href","rel","App","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.797607b7.chunk.js","sourcesContent":["import * as React from 'react'\n\ninterface ThemeContextData {\n  theme: string;\n  setTheme: (theme: string) => void;\n}\n\nexport const ThemeContext = React.createContext<Partial<ThemeContextData>>({})\n\nconst ThemeProvider: React.FC = ({children}) => {\n  const [ theme, setTheme ] = React.useState<string>(\"\");\n  \n  const value: ThemeContextData = {\n    theme,\n    setTheme\n  }\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport default ThemeProvider;","// firebase.js\nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport \"firebase/auth\";\n\nimport { Task, NewTask, TaskStatus, TaskDeleteList } from \"./types/task\";\n\n// *** USE YOUR CONFIG OBJECT ***\n// Initialize Firebase\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCf4r4_JiAWZjMYxHx2oPdOOPBunUeG9zg\",\n  authDomain: \"taskboard-drethedev.firebaseapp.com\",\n  databaseURL: \"https://taskboard-drethedev.firebaseio.com\",\n  projectId: \"taskboard-drethedev\",\n  storageBucket: \"taskboard-drethedev.appspot.com\",\n  messagingSenderId: \"868447749524\",\n  appId: \"1:868447749524:web:bc280f2ee21da6c3fe7b81\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// --------------------------- addTask\nexport const addTask = (dbRef: string, newTask: NewTask) => {\n  firebase.database().ref(dbRef).push(newTask);\n};\n\n// --------------------------- updateTask\nexport const updateTask = (dbRef: string, key: string, newValue: string) =>\n  firebase\n    .database()\n    .ref(dbRef + key)\n    .update({ task: newValue });\n\n// --------------------------- removeTask\nexport const removeTask = (dbRef: string, key: string) =>\n  firebase.database().ref(dbRef).child(key).remove();\n\n// --------------------------- moveTask\nexport const moveTask = (dbRef: string, status: TaskStatus) => {\n  firebase.database().ref(dbRef).update({ status });\n};\n\n// --------------------------- clearTaskList\nexport const clearTaskList = (dbRef: string, taskListItems: TaskDeleteList) => {\n  // pass an object of keys with null values to clear multiple items\n  firebase.database().ref(dbRef).update(taskListItems);\n};\n\n// --------------------------- clearTaskboard\nexport const clearTaskboard = (dbRef: string) => {\n  // remove all items in firebase\n  firebase.database().ref(dbRef).remove();\n};\n\nexport const retrieveTaskItems = (dbRef: string, setTaskItems: (taskItems: Task[]) => void) => {\n  // listener for any value change on the db reference\n  firebase\n    .database()\n    .ref(dbRef)\n    .on(\"value\", (response) => {\n      const tasksData = response.val();\n\n      // create empty array to store data retrieved from db later\n      const taskItems: Task[] = [];\n      for (const key in tasksData) {\n        const taskItem: Task = {\n          key: key,\n          task: tasksData[key].task,\n          status: tasksData[key].status,\n        };\n        taskItems.push(taskItem);\n      }\n\n      // update state with the taskItems retrieved from the database\n      setTaskItems(taskItems);\n    });\n};\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;\n","import * as React from 'react';\nimport firebase from '../firebase';\nimport Swal from \"sweetalert2\";\nimport { User } from \"../types/user\";\n\nexport interface UserContextData {\n  user: User;\n  checkForUser: boolean;\n  setUser: (user: User) => void;\n  signInUser: () => void;\n  logoutUser: () => void;\n}\n\nexport const UserContext = React.createContext<Partial<UserContextData>>({});\n\nconst UserProvider: React.FC = ({children}) => {\n  const [ user, setUser ] = React.useState<User>({dbRef: \"public/\", loggedIn: false});\n  const [ checkForUser, setCheckForUser ] = React.useState<boolean>(true); \n\n  // ------- check if there's a logged in user before retrieving any tasks\n  React.useEffect(function checkForAuthenticatedUser() {\n    // check if there is a current user\n    firebase.auth().onAuthStateChanged((user) => {\n      // if there is a user update state with the dbRef and loggedIn to true\n      if (user) {\n        setUser({dbRef: user.uid + \"/\", loggedIn: true});\n      }\n      // set checkForUser to false\n      setCheckForUser(false)\n    })\n  }, [])\n\n  \n\n  // --------------------------- signInUser (Google Auth)\n  const signInUser = () => {\n    // create new google auth provider\n    const provider = new firebase.auth.GoogleAuthProvider();\n    \n    // initiate sign in with popup using google auth\n    firebase.auth().signInWithPopup(provider)\n      .then(({user}) => {\n        // once user is signed in, set user info and user's dbRef in state\n        if (user) {\n          setUser({\n            dbRef: user.uid + \"/\",\n            loggedIn: true\n          })\n        }\n\n        setCheckForUser(true);\n      })\n      .catch(error => {\n        // if there is an error, display an alert\n\n        Swal.fire({\n          title: \"Oops!\",\n          text: \"There was an error signing in: \" + error,\n          icon: \"error\",\n          confirmButtonText: \"OK\"\n        })\n      })\n  }\n\n  // --------------------------- logoutUser\n  const logoutUser = () => {\n    firebase.auth().signOut()\n      .then(() => {\n        // once user is logged out, reset user and dbRef in state\n        setUser({\n          dbRef: \"public/\",\n          loggedIn: false\n        })\n\n        setCheckForUser(true);\n      })\n      .catch(error => {\n        // if there is an error, display an alert\n        Swal.fire({\n          title: \"Oops!\",\n          text: \"There was an error while logging out: \" + error,\n          icon: \"error\",\n          confirmButtonText: \"OK\"\n        })\n      })\n  }\n\n  const value = {\n    user,\n    checkForUser,\n    setUser,\n    signInUser,\n    logoutUser\n  }\n\n  return (\n    <UserContext.Provider value={value}>\n      {children}\n    </UserContext.Provider>\n  )\n}\n\nexport default UserProvider;","import * as React from 'react';\nimport { retrieveTaskItems } from '../firebase';\nimport { UserContext, UserContextData } from './UserContext';\nimport {Task, TaskStatus, TaskListFilter} from '../types/task';\n\ninterface TasksContextData {\n  taskStatus: TaskStatus[];\n  taskItems: Task[];\n  numOfTasks: number;\n  loadComplete: boolean;\n  searchTerms: string;\n  setSearchItems: (searchItems: Task[]) => void;\n  setSearchTerms: (searchTerms: string) => void;\n  setListFilter: (filter: TaskListFilter) => void;\n}\n\nexport const TasksContext = React.createContext<Partial<TasksContextData>>({});\n\nconst TasksProvider: React.FC = ({children}) => {\n  const [ loadComplete, setLoadComplete ] = React.useState<boolean>(false); \n  const [ taskItems, setTaskItems ] = React.useState<Task[]>([]);\n  const { user, checkForUser } = React.useContext<Partial<UserContextData>>(UserContext);\n\n  const [ listFilter, setListFilter ] = React.useState<TaskListFilter>(\"all\");\n\n  const [ searchTerms, setSearchTerms ] = React.useState(\"\");\n  const [ searchItems, setSearchItems ] = React.useState<Task[]>([]);\n\n  const taskStatus: TaskStatus[] = ['open', 'inProgress', 'complete'];\n\n  // --------------------------- retrieveTaskItems\n  const fetchTasks = React.useCallback(() => {\n    if (user && user.dbRef) {\n      retrieveTaskItems(user.dbRef, setTaskItems)\n    }\n  }, [user])  \n\n  // retreive tasks once userCheck is true\n  React.useEffect(function fetchTasksAfterUserCheck() {\n    if (!checkForUser) {\n      fetchTasks();\n      setLoadComplete(true);\n    }\n\n  }, [checkForUser, fetchTasks])\n\n\n    // --------------------------- handleSearch\n    const handleSearch = () => {\n      if (searchTerms) {\n        // create regex for search terms - case insensistive\n        const searchString = new RegExp(searchTerms, 'i');\n    \n        // filter out tasks by test against search terms\n        const searchItems = taskItems.filter(({task}) => searchString.test(task));\n    \n        // store filtered results into searchItems state to preserve the state of the taskItems\n        setSearchItems(searchItems);\n      }\n    }\n  // filter tasks from search terms\n  React.useEffect(handleSearch, [searchTerms, taskItems])\n  \n\n  // if there are search terms, display the filtered searchItems, otherwise show all taskItems\n  const items = !searchTerms.length ? taskItems : searchItems;\n\n  // if a list has been filtered, only display items from that list\n  const lists = listFilter === 'all' ? taskStatus : [listFilter];\n\n  \n  const value = {\n    taskStatus: lists,\n    taskItems: items,\n    numOfTasks: items.length,\n    loadComplete,\n    searchTerms,\n    setSearchItems,\n    setSearchTerms,\n    setListFilter,\n  }\n\n\n  return (\n    <TasksContext.Provider value={value}>\n      {children}\n    </TasksContext.Provider>\n  )\n}\n\nexport default TasksProvider","import React, { useContext } from 'react';\nimport { TasksContext } from '../contexts/TasksContext';\nimport { ThemeContext } from '../contexts/ThemeContext';\nimport { UserContext } from '../contexts/UserContext';\nimport { clearTaskboard } from '../firebase';\n\n\nconst Settings: React.FC = () => {\n  const { theme, setTheme } = useContext(ThemeContext);\n  const { user, signInUser, logoutUser } = useContext(UserContext);\n  const { taskItems, loadComplete } = useContext(TasksContext);\n\n  const numOfTasks = taskItems ? taskItems.length : 0;\n\n  const toggleTheme = () => {\n      if (setTheme) {\n        setTheme(theme === \"dark\" ? \"\" : \"dark\")\n      }\n  }\n\n  const handleClearTaskboard = () => { \n    if (user) {\n      clearTaskboard(user.dbRef); \n    }\n  }\n\n  return (\n    <div className=\"settings\">\n      <button onClick={handleClearTaskboard}  className=\"btn btn--black btn__taskBoard btn__taskBoard--clear\" disabled={numOfTasks === 0}>Clear Task Board</button>\n          {\n            // check if app has loaded before display sign in / log out buttons\n            loadComplete \n            ? user && user.loggedIn // check if there is a logged in user\n                ? <button  onClick={logoutUser} className=\"btn btn--green btn__taskBoard btn__taskBoard--auth\">Log Out</button>\n                : <button  onClick={signInUser} className=\"btn btn--red btn__taskBoard btn__taskBoard--auth\">Sign In With Google</button>\n            // if app has not loaded do not display sign in / log out buttons\n            : null\n          }\n          <input className=\"themeToggle__checkbox sr-only\" type=\"checkbox\" name=\"themeToggle\" id=\"themeToggle\" onChange={toggleTheme} defaultChecked={theme === \"dark\"}/>\n          <label className=\"themeToggle__label\" htmlFor=\"themeToggle\">{theme === \"dark\" ? \"Light\" : \"Dark\"} Mode <span className=\"themeToggle__toggler\"></span></label>\n    </div>\n  )\n}\n\nexport default Settings;","import * as React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronDown, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport Settings from './Settings';\n\nconst Header: React.FC = () => {\n  const [ openSettingsMenu, setOpenSettingsMenu ] = React.useState<boolean>(false);\n\n  return (  \n    <header>\n      <div className=\"wrapper displayContainer\">\n        <div className=\"header__text\">\n          <h1>Task Board</h1>\n          <p>Add and track tasks to increase productivity!</p>\n        </div>\n        <div className=\"header__buttons\">\n            <h2 onClick={() => setOpenSettingsMenu(openSettingsMenu => !openSettingsMenu)}>\n              <span>Settings </span>\n              <span className=\"header__menuToggleIcon\"><FontAwesomeIcon icon={openSettingsMenu ? faTimes : faChevronDown} /></span>\n            </h2>\n          {\n            openSettingsMenu\n            &&\n            <Settings />\n          }\n          \n        </div>\n      </div>\n    </header>\n  )\n}\n\n\nexport default Header;","import * as React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { TasksContext } from '../contexts/TasksContext';\nimport {TaskListFilter} from \"../types/task\"\n\nconst TaskBoardMenu: React.FC = () => {\n  const { setListFilter, searchTerms, setSearchTerms, setSearchItems, numOfTasks } = React.useContext(TasksContext);\n\n  const changeListFilter = (filter: TaskListFilter) => {\n      if (setListFilter) {\n        setListFilter(filter)\n      }\n\n  }\n  // --------------------------- handleChange\n  const handleSearchInput = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    // call handleSearch if the input searchTerms input was changed and there are tasks\n    if (setSearchTerms && numOfTasks) {\n      // set seachTerms state to value, and then call this.handleSearch\n      setSearchTerms(evt.target.value);\n    }\n  }\n\n  const clearSearch = () => {\n    if (setSearchItems && setSearchTerms) {\n      setSearchTerms(\"\");\n      setSearchItems([]);\n    }\n  }\n\n  return(\n    <section className=\"taskBoard__menu\">\n\n      {/* Task List Filter Inputs */}\n      <fieldset className=\"taskBoard__listFilter\">\n        <div className=\"inputContainer__filter\">\n          <legend className=\"srOnly\">Filter the task items by list</legend>\n          <input type=\"radio\" className=\"srOnly taskBoard__filterInput\" name=\"listFilter\" id=\"filterAll\" value=\"all\" onChange={() => changeListFilter(\"all\")} defaultChecked />\n          <label className=\"btn btn--black\" htmlFor=\"filterAll\">All</label>\n          \n          <input type=\"radio\" className=\"srOnly taskBoard__filterInput\" name=\"listFilter\" id=\"filterOpen\" value=\"open\" onChange={() => changeListFilter(\"open\")} />\n          <label className=\"btn btn--red\" htmlFor=\"filterOpen\">Open</label>\n          \n          <input type=\"radio\" className=\"srOnly taskBoard__filterInput\" name=\"listFilter\" id=\"filterInProgress\" value=\"inProgress\" onChange={() => changeListFilter(\"inProgress\")} />\n          <label className=\"btn btn--blue\" htmlFor=\"filterInProgress\">In Progress</label>\n          \n          <input type=\"radio\" className=\"srOnly taskBoard__filterInput\" name=\"listFilter\" id=\"filterComplete\" value=\"complete\" onChange={() => changeListFilter(\"complete\")} />\n          <label className=\"btn btn--green\" htmlFor=\"filterComplete\">Complete</label>\n        </div>\n      </fieldset>\n\n      {/* Task List Search Bar */}\n      <div className=\"inputContainer__searchBar\">\n        <label htmlFor=\"searchTerms\" className=\"srOnly\">Search for task items</label>\n        <input className=\"taskBoard__searchBar\" type=\"text\" name=\"searchTerms\" id=\"searchTerms\" placeholder=\"search\" onChange={handleSearchInput} value={searchTerms} />\n        {\n          // Check if the user has started a search\n          searchTerms ?\n          // Display button to clear the search terms\n          <>\n            <label htmlFor=\"searchBarBtn\" className=\"srOnly\">Button to clear the search terms</label>\n            <button id=\"searchBarBtn\" className=\"taskBoard__searchBarBtn\" onClick={clearSearch}>\n              <FontAwesomeIcon className=\"taskBoard__searchBarIcon--clear\" icon={faTimes} aria-hidden=\"true\"/>\n            </button>\n          </>\n          :\n          // Display search icon to visually indicate that tasks can be searched for\n          <FontAwesomeIcon className=\"taskBoard__searchBarIcon\" icon={faSearch} aria-hidden=\"true\"/>\n        }\n      </div>\n\n    </section>\n  )\n}\n\nexport default TaskBoardMenu;","import * as React from 'react';\nimport { useContext, useState, useEffect } from 'react';\nimport autosize from 'autosize';\nimport {UserContext} from '../contexts/UserContext';\nimport { addTask, removeTask, updateTask } from '../firebase';\nimport { NewTask, TaskStatus } from '../types/task'\ninterface TaskFormProps {\n  id: TaskStatus | string;\n  type: \"edit\" | \"staging\";\n  taskValue?: string;\n  closeForm: () => void;\n}\n\nconst TaskForm: React.FC<TaskFormProps> = (props) => {\n  const { id, type, taskValue, closeForm } = props;\n  const {user} = useContext(UserContext);\n  const [ taskInput, setTaskInput ] = useState(taskValue || \"\")\n\n    // --------------------------- useEffect\n    useEffect(() => {\n      const textInput = document.querySelector(`#taskFormInput_${id}`) as HTMLTextAreaElement;\n  \n      // only go to the end of the text if the input is not already focused\n      if (textInput && textInput !== document.activeElement) {\n        // autosize the textarea height as needed\n        autosize(textInput);\n  \n        // set the cursor to the end of the text input by setting value to \"\" > focus > value back to state.stagingTask\n        textInput.value = \"\";\n        // focus on the input\n        textInput.focus();\n        // set the input value\n        textInput.value = taskInput;\n      }\n    }, [id, taskInput])\n\n    const handleBlur = (evt: React.SyntheticEvent) => {\n      // implementation from https://gist.github.com/pstoica/4323d3e6e37e8a23dd59\n      const currentTarget = evt.currentTarget;\n  \n      // Check the newly focused element in the next tick of the event loop\n      setTimeout(() => {\n        // Check if the new activeElement is a child of the original container\n        if (!currentTarget.contains(document.activeElement)) {\n          // if new focused element is not contained in the form ... toggle out of staging a task\n          closeForm()\n        }\n      }, 5);\n    }\n\n  const handleTaskInputChange = (evt: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setTaskInput(evt.target.value);\n  }\n\n  const handleClear = () => setTaskInput(\"\");\n\n  const handleAddTask = (evt: React.SyntheticEvent) => { \n    evt.preventDefault();\n    const newTask: NewTask = {\n      task: taskInput,\n      status: id as TaskStatus\n    }\n\n    if (user) {\n      addTask(user.dbRef, newTask); \n      closeForm()\n    }\n  }\n\n  const handleRemoveTask = () => { \n    if (user) {\n      closeForm()\n      removeTask(user.dbRef, id); \n    }\n  }\n  \n  const handleUpdateTask = (evt: React.SyntheticEvent) => { \n    evt.preventDefault();\n    if (user) {\n      updateTask(user.dbRef, id, taskInput); \n      closeForm()\n    }\n  }\n\n  return (\n    <>\n      <h3 className=\"taskForm__heading\">{type === 'edit' ? 'Edit Task' : 'New Task'}</h3>\n      <form action=\"#\" onSubmit={type === 'edit' ? handleUpdateTask : handleAddTask} onBlur={handleBlur} className=\"taskForm\">\n        <label htmlFor={`taskFormInput_${id}`} className=\"srOnly\">Task Item</label>\n        <textarea className=\"taskForm__input\" id={`taskFormInput_${id}`} name=\"taskFormInput\" onChange={handleTaskInputChange} value={taskInput}></textarea>\n        \n        {\n        // if there is input, display button to clear the text\n        taskInput &&\n          <>\n            <label htmlFor={`taskBtn__clear--${id}`} className=\"srOnly\">Clear task input</label>\n            <button id={`taskBtn__clear--${id}`} type=\"button\" onClick={handleClear} className=\"btn btn--black\">Clear</button>\n          </>  \n        }\n        \n        {\n        // if in editing mode, display button to delete the task\n        type === \"edit\" \n        &&\n          <>\n            <label htmlFor={`taskBtn__delete--${id}`} className=\"srOnly\">Delete task</label>\n            <button id={`taskBtn__delete--${id}`} type=\"button\" onClick={handleRemoveTask} className=\"btn btn--red\">Delete</button>\n          </>\n        }\n        \n        {/* Save task button */}\n        <label htmlFor={`taskBtn__save--${id}`} className=\"srOnly\">Save task input</label>\n        <button id={`taskBtn__save--${id}`} className=\"btn btn--green\" disabled={taskInput.length === 0}>{type === 'edit' ? 'Save' : 'Add'}</button>\n        \n      </form>  \n    </>\n  );\n}\n\nexport default TaskForm;","import React, { useContext, useState } from \"react\";\nimport TaskForm from \"./TaskForm\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { UserContext } from \"../contexts/UserContext\";\nimport { moveTask } from \"../firebase\";\nimport { TasksContext } from \"../contexts/TasksContext\";\n\nimport { TaskStatus } from \"../types/task\"\n\ntype Direction = -1 | 1;\n\ninterface TaskItemProps {\n  id: string;\n  task: string;\n  status: TaskStatus\n}\n\nconst TaskItem: React.FC<TaskItemProps> = ({ id, task, status }) => {\n  const [isEditing, setIsEditing] = useState<boolean>(false);\n  const { user } = useContext(UserContext);\n  const { taskStatus } = useContext(TasksContext);\n\n  const changeStatus = (direction: Direction) => {\n    if (user && taskStatus) {\n      // find current status index\n      const currentIdx = taskStatus.indexOf(status);\n\n      // store new index as the value of currentIdx + the direction (1 or - 1)\n      let newIdx = currentIdx + direction;\n  \n      // prevent out of range indexes of the taskStatus array\n      // if newIdx < 0 - set to 0, if newIdx gte taskStatus length - set to last item in array, otherwise keep the value\n      newIdx =\n        newIdx < 0\n          ? 0\n          : newIdx >= taskStatus.length\n          ? taskStatus.length - 1\n          : newIdx;\n  \n      if (status !== taskStatus[newIdx]) {\n        moveTask(user.dbRef + id, taskStatus[newIdx]);\n      }\n    }\n\n  };\n  // --------------------------- handleMovePrev\n  const handleMovePrev = () => { changeStatus(-1); };\n\n  // --------------------------- handleMoveNext\n  const handleMoveNext = () => { changeStatus(1); };\n\n  // --------------------------- toggleEdit\n  // check if taskFormInput has a value (not cleared by user)\n  const toggleEdit = () => {\n    setIsEditing(isEditing => !isEditing);\n  };\n\n  return (\n    <li className={`taskItem taskItem--${status}`}>\n      {\n        // If status is 'open' DO NOT render the \"previous\" status button\n        status !== \"open\" && (\n          <>\n            <label htmlFor={`btnPrev--${id}`} className=\"srOnly\">\n              Move task to the previous status\n            </label>\n            <button\n              id={`btnPrev--${id}`}\n              className=\"taskItem__btn taskItem__btn--prev\"\n              onClick={handleMovePrev}\n            >\n              <FontAwesomeIcon icon={faChevronLeft} aria-hidden=\"true\" />\n              <span className=\"srOnly\">Move task to the previous status</span>\n            </button>\n          </>\n        )\n      }\n\n      {\n        // if not in editing mode render the task as text ... otherwise render the task form to edit the task\n        !isEditing ? (\n          <>\n            <label htmlFor={`taskItem--${id}`} className=\"srOnly\">\n              Click or focus on the text of the task to enter edit mode and\n              modify or delete the task\n            </label>\n            <button\n              id={`taskItem--${id}`}\n              className=\"taskItem__text\"\n              onClick={toggleEdit}\n              onFocus={toggleEdit}\n            >\n              {task}\n            </button>\n          </>\n        ) : (\n          <TaskForm\n            id={id}\n            type=\"edit\"\n            taskValue={task}\n            closeForm={toggleEdit}\n          />\n        )\n      }\n\n      {\n        // If status is 'complete' DO NOT render the \"next\" status button\n        status !== \"complete\" && (\n          <>\n            <label htmlFor={`btnNext--${id}`} className=\"srOnly\">\n              Move task to the previous status\n            </label>\n            <button\n              id={`btnNext--${id}`}\n              className=\"taskItem__btn taskItem__btn--next\"\n              onClick={handleMoveNext}\n            >\n              <FontAwesomeIcon icon={faChevronRight} aria-hidden=\"true\" />\n              <span className=\"srOnly\">\n                Click to move task to the next status\n              </span>\n            </button>\n          </>\n        )\n      }\n    </li>\n  );\n};\n\nexport default TaskItem;\n","import React, { useContext, useState } from \"react\";\nimport TaskItem from \"./TaskItem\";\nimport TaskForm from \"./TaskForm\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBars, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { clearTaskList } from \"../firebase\";\nimport { UserContext } from \"../contexts/UserContext\";\n\nimport { Task, TaskStatus, TaskDeleteList } from '../types/task'\n\ninterface TaskListProps {\n  status: TaskStatus;\n  tasks: Task[];\n}\n\nconst TaskList: React.FC<TaskListProps> = ({ status, tasks}) => {\n  const [isStaging, setIsStaging] = useState(false);\n  const [menuEnabled, setMenuEnabled] = useState(false);\n\n  const { user } = useContext(UserContext);\n\n  // heading text for task status lists\n  const statusString = {\n    open: \"Todo\",\n    inProgress: \"In Progress\",\n    complete: \"Completed\",\n  };\n\n  // --------------------------- toggleMenuEnabled\n  const toggleMenuEnabled = () => setMenuEnabled(menuEnabled => !menuEnabled);\n\n  const toggleTaskStaging = () => setIsStaging(isStaging => !isStaging);\n\n  // --------------------------- handleClearList\n  const handleClearList = () => {\n    // if task lst has items\n    if (user && tasks.length) {\n      // filter out the full task items list to those with the status of the task list\n      const taskListItems = tasks\n        .filter((task) => task.status === status)\n        // create an object with the keys of the task list items with a null value\n        .reduce((deleteList: TaskDeleteList, taskItem) => {\n          deleteList[taskItem.key] = null;\n          return deleteList;\n        }, {});\n      // remove the filtered items from firebase\n      clearTaskList(user.dbRef, taskListItems);\n    }\n    // toggle tasklist menu to false\n    setMenuEnabled(false);\n  };\n\n  // --------------------------- return\n\n  return (\n    <div className=\"taskList\">\n      <div className={`taskList__header taskList__header--${status}`}>\n        <label htmlFor={`taskListMenuBtn--${status}`} className=\"srOnly\">\n          Click the button to toggle the task list menu to clear the task list's\n          items\n        </label>\n        <button\n          id={`taskListMenuBtn--${status}`}\n          className={\n            menuEnabled\n              ? \"btn taskList__menuBtn taskList__menuBtn--active\"\n              : \"btn taskList__menuBtn\"\n          }\n          onClick={toggleMenuEnabled}\n        >\n          <span className=\"srOnly\">Toggle the task list's menu</span>\n          {!menuEnabled ? (\n            <FontAwesomeIcon icon={faBars} />\n          ) : (\n            <FontAwesomeIcon icon={faTimes} />\n          )}\n        </button>\n\n        <h2 className=\"taskList__headingText\">\n          {/* Task List Name */}\n          {statusString[status]}\n          {/* Task List Item Counter */}\n          {tasks.length > 0 && (\n            <span className=\"taskList__count\">{tasks.length}</span>\n          )}\n        </h2>\n\n        {\n          // Toggle task list header icon depending if the menuEnabled is true\n          !menuEnabled ? (\n            <>\n              <label htmlFor={`taskListAddBtn--${status}`} className=\"srOnly\">\n                Click the button to toggle the add new task form\n              </label>\n              <button\n                id={`taskListAddBtn--${status}`}\n                onClick={toggleTaskStaging}\n                className={`btn taskList__addBtn`}\n                disabled={isStaging}\n              >\n                Add Task\n              </button>\n            </>\n          ) : (\n            <>\n              <label htmlFor={`taskListClearBtn--${status}`} className=\"srOnly\">\n                Click the button to clear the task list's items\n              </label>\n              <button\n                id={`taskListClearBtn--${status}`}\n                onClick={handleClearList}\n                className={`btn btn--black taskList__clearBtn`}\n                disabled={tasks.length === 0}\n              >\n                Clear List\n              </button>\n            </>\n          )\n        }\n      </div>\n      <ul className=\"taskList__list\">\n        {\n          // render a TaskForm to add a new task for the task list\n          isStaging && (\n            <li className={`taskItem taskItem--${status}`}>\n              <TaskForm type=\"staging\" id={status} closeForm={toggleTaskStaging} />\n            </li>\n          )\n        }\n        {\n          // render the taskform items for the list\n          tasks.map(({ key, task, status }) => (\n            <TaskItem\n              key={key}\n              id={key}\n              task={task}\n              status={status}\n            />\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\nexport default TaskList;\n","import * as React from 'react';\nimport { TasksContext } from '../contexts/TasksContext';\nimport TaskList from './TaskList';\n\nconst TaskLists: React.FC = () => {\n  const { taskItems, taskStatus } = React.useContext(TasksContext);\n\n  return (\n    <section className=\"taskLists\">\n      { \n        taskStatus && taskStatus.map((status) => {\n          const tasks = taskItems ? taskItems.filter(task => task.status === status) : [];\n          return (\n            <TaskList \n              key={status} \n              status={status}\n              tasks={tasks} \n            />\n          )\n        })\n      } \n    </section>\n  )\n\n\n}\n\nexport default TaskLists;","import * as React from 'react'\n\nconst Footer: React.FC = () => (\n  <footer>\n    <div className=\"wrapper displayContainer\">\n      <p>Copyright 2020</p> \n      <p>Created By <a href=\"https://andrefacey.com\">Andre Facey</a> at <a href=\"https://junocollege.com\" target=\"_blank\" rel=\"noopener noreferrer\">Juno College</a></p>\n      <p>Design Inspiration from <a href=\"https://scottrs.ca\" target=\"_blank\" rel=\"noopener noreferrer\">Scott Sobere-Yu</a> and <a href=\"https://dribbble.com/shots/6250762-Kanban-Board\" target=\"_blank\" rel=\"noopener noreferrer\">Nikita</a></p>\n    </div>\n  </footer>\n);\n\nexport default Footer;","import React, { useContext } from 'react';\nimport { ThemeContext } from './contexts/ThemeContext';\nimport Header from './components/Header';\nimport TaskBoardMenu from './components/TaskBoardMenu';\nimport TaskLists from './components/TaskLists';\nimport Footer from './components/Footer';\nimport './App.css';\n\nconst App = () => {\n  const { theme } = useContext(ThemeContext);\n\n  return (\n  <div className={`pageContainer ${theme}`}>\n    {/* START of HEADER */}\n    <Header />\n    \n    {/* START of MAIN */}\n    <main>\n      <div className=\"wrapper\">\n        <TaskBoardMenu />\n        <TaskLists />\n      </div>\n    </main>\n\n    {/* START of FOOTER */}\n    <Footer />\n  </div>\n  );\n}\n\nexport default App;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\n\nimport UserContext from './contexts/UserContext';\nimport ThemeContext from './contexts/ThemeContext';\nimport TasksContext from './contexts/TasksContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <UserContext>\n      <ThemeContext>\n        <TasksContext>\n          <App />\n        </TasksContext>\n      </ThemeContext>\n    </UserContext>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}