{"version":3,"sources":["firebase.js","components/Header.js","components/TaskBoardMenu.js","components/TaskForm.js","components/TaskItem.js","components/TaskList.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","clearTaskboard","numOfTasks","className","onClick","disabled","TaskBoardMenu","props","searchTerms","handleChange","clearSearch","type","name","id","value","onChange","defaultChecked","htmlFor","placeholder","icon","faTimes","aria-hidden","faSearch","TaskForm","handleSubmit","handleBlur","addTask","taskValue","removeTask","toggleForm","action","onSubmit","onBlur","TaskItem","evt","currentTarget","setTimeout","contains","document","activeElement","setState","isEditing","target","handleEditSubmit","preventDefault","editTask","state","taskFormInput","handleMovePrev","moveTask","status","handleMoveNext","toggleEdit","task","taskInput","querySelector","this","autosize","focus","faChevronLeft","onFocus","faChevronRight","Component","TaskList","toggleMenuEnabled","menuEnabled","isStaging","handleStagingTask","e","stagingTask","toggleTaskStaging","handleAddTask","handleClearList","tasks","clearTaskList","length","filter","reduce","deleteList","taskItem","key","statusString","faBars","map","Footer","href","rel","App","newTask","database","ref","remove","searchItems","taskListItems","update","filterSearchItems","item","push","updateTask","newValue","child","direction","dbRef","taskStatus","currentIdx","indexOf","newIdx","taskItems","handleSearch","searchString","RegExp","test","listFilter","on","response","tasksData","val","open","inProgress","complete","items","lists","idx","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAgBAA,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,2CACZC,YAAa,kDACbC,UAAW,2BACXC,cAAe,uCACfC,kBAAmB,eACnBC,MAAO,8CAMMR,QAAf,ECLeS,EAZA,SAAC,GAAD,IAAEC,EAAF,EAAEA,eAAgBC,EAAlB,EAAkBA,WAAlB,OACb,gCACE,yBAAKC,UAAU,4BACb,yBAAKA,UAAU,gBACb,0CACA,6EAEF,4BAAQC,QAASH,EAAiBE,UAAU,sDAAsDE,SAAWH,EAAa,GAAK,YAA/H,uB,cC2CSI,EAhDO,SAAAC,GAAU,IACtBC,EAA2CD,EAA3CC,YAAaC,EAA8BF,EAA9BE,aAAcC,EAAgBH,EAAhBG,YAEnC,OACE,6BAASP,UAAU,mBAGjB,8BAAUA,UAAU,yBAClB,yBAAKA,UAAU,0BACb,4BAAQA,UAAU,UAAlB,iCACA,2BAAOQ,KAAK,QAAQR,UAAU,gCAAgCS,KAAK,aAAaC,GAAG,YAAYC,MAAM,MAAMC,SAAUN,EAAcO,gBAAc,IACjJ,2BAAOb,UAAU,kBAAkBc,QAAQ,aAA3C,OAEA,2BAAON,KAAK,QAAQR,UAAU,gCAAgCS,KAAK,aAAaC,GAAG,aAAaC,MAAM,OAAOC,SAAUN,IACvH,2BAAON,UAAU,eAAec,QAAQ,cAAxC,QAEA,2BAAON,KAAK,QAAQR,UAAU,gCAAgCS,KAAK,aAAaC,GAAG,mBAAmBC,MAAM,aAAaC,SAAUN,IACnI,2BAAON,UAAU,gBAAgBc,QAAQ,oBAAzC,eAEA,2BAAON,KAAK,QAAQR,UAAU,gCAAgCS,KAAK,aAAaC,GAAG,iBAAiBC,MAAM,WAAWC,SAAUN,IAC/H,2BAAON,UAAU,iBAAiBc,QAAQ,kBAA1C,cAKJ,yBAAKd,UAAU,6BACb,2BAAOc,QAAQ,cAAcd,UAAU,UAAvC,yBACA,2BAAOA,UAAU,uBAAuBQ,KAAK,OAAOC,KAAK,cAAcC,GAAG,cAAcK,YAAY,SAASH,SAAUN,EAAcK,MAAON,IAG1IA,EAEA,oCACE,2BAAOS,QAAQ,eAAed,UAAU,UAAxC,oCACA,4BAAQU,GAAG,eAAeV,UAAU,0BAA0BC,QAASM,GACrE,kBAAC,IAAD,CAAiBP,UAAU,kCAAkCgB,KAAMC,IAASC,cAAY,WAK5F,kBAAC,IAAD,CAAiBlB,UAAU,2BAA2BgB,KAAMG,IAAUD,cAAY,YCzB7EE,EAjBE,SAAAhB,GAAU,IACjBM,EAAiGN,EAAjGM,GAAIF,EAA6FJ,EAA7FI,KAAMa,EAAuFjB,EAAvFiB,aAAcC,EAAyElB,EAAzEkB,WAAYhB,EAA6DF,EAA7DE,aAAciB,EAA+CnB,EAA/CmB,QAASC,EAAsCpB,EAAtCoB,UAAWC,EAA2BrB,EAA3BqB,WAAYC,EAAetB,EAAfsB,WAE1F,OACE,oCACA,wBAAI1B,UAAU,qBAA8B,SAATQ,EAAkB,YAAc,YACnE,0BAAMmB,OAAO,IAAIC,SAAUP,EAAcQ,OAAQP,EAAYtB,UAAU,YACrE,8BAAUA,UAAU,kBAAkBU,GAAE,wBAAmBA,GAAMD,KAAK,gBAAgBG,SAAUN,EAAcK,MAAOa,IAC3G,SAAThB,GAAmB,4BAAQA,KAAK,SAASP,QAASwB,EAAYzB,UAAU,gBAArD,UACpB,4BAAQQ,KAAK,SAASP,QAASyB,EAAY1B,UAAU,mBAArD,UACU,QAATQ,GAAkB,4BAAQA,KAAK,SAASP,QAASsB,EAASvB,UAAU,4BAAlD,OACnB,4BAAQA,UAAU,kBAAlB,W,iBC0HS8B,E,kDAhIb,WAAY1B,GAAQ,IAAD,8BACjB,gBA4BFkB,WAAa,SAACS,GAEZ,IAAMC,EAAgBD,EAAIC,cAG1BC,YAAW,WAEJD,EAAcE,SAASC,SAASC,gBAEnC,EAAKC,SAAS,CAACC,WAAW,MAE3B,IAxCc,EA4CnBhC,aAAe,SAACyB,GACd,EAAKM,SAAL,eACGN,EAAIQ,OAAO9B,KAAOsB,EAAIQ,OAAO5B,SA9Cf,EAmDnB6B,iBAAmB,SAACT,GAClBA,EAAIU,iBAEJ,EAAKrC,MAAMsC,SAAS,EAAKtC,MAAMM,GAAI,EAAKiC,MAAMC,eAE9C,EAAKP,SAAS,CAACC,WAAW,KAxDT,EA4DnBO,eAAiB,kBAAM,EAAKzC,MAAM0C,SAAS,EAAK1C,MAAMM,GAAI,EAAKN,MAAM2C,QAAS,IA5D3D,EA8DnBC,eAAiB,kBAAM,EAAK5C,MAAM0C,SAAS,EAAK1C,MAAMM,GAAI,EAAKN,MAAM2C,OAAQ,IA9D1D,EAiEnBtB,WAAa,kBAAM,EAAKrB,MAAMqB,WAAW,EAAKrB,MAAMM,KAjEjC,EAoEnBuC,WAAa,kBAAM,EAAKZ,SAAS,CAAEC,WAAY,EAAKK,MAAML,aAjExD,EAAKK,MAAQ,CACXC,cAAexC,EAAM8C,KACrBZ,WAAW,GALI,E,iEAWjB,IAAMa,EAAYhB,SAASiB,cAAT,yBAAyCC,KAAKjD,MAAMM,KAGlEyC,GAAaA,IAAchB,SAASC,gBAEtCkB,IAASH,GAGTA,EAAUxC,MAAQ,GAElBwC,EAAUI,QAEVJ,EAAUxC,MAAQ0C,KAAKV,MAAMC,iB,+BAgDvB,IAAD,EAEsBS,KAAKjD,MAA1BM,EAFD,EAECA,GAAIwC,EAFL,EAEKA,KAAMH,EAFX,EAEWA,OAElB,OACE,wBAAI/C,UAAS,6BAAwB+C,IAIxB,SAAXA,GAEA,oCACE,2BAAOjC,QAAO,mBAAcJ,GAAMV,UAAU,UAA5C,oCACA,4BAAQU,GAAE,mBAAcA,GAAMV,UAAU,oCAAoCC,QAASoD,KAAKR,gBACxF,kBAAC,IAAD,CAAiB7B,KAAMwC,IAAetC,cAAY,SAClD,0BAAMlB,UAAU,UAAhB,sCAOLqD,KAAKV,MAAML,UAMR,kBAAC,EAAD,CACE5B,GAAIA,EACJF,KAAK,OACLa,aAAcgC,KAAKb,iBACnBlB,WAAY+B,KAAK/B,WACjBhB,aAAc+C,KAAK/C,aACnBkB,UAAW6B,KAAKV,MAAMC,cACtBnB,WAAY4B,KAAK5B,WACjBC,WAAY2B,KAAKJ,aAbnB,oCACE,2BAAOnC,QAAO,oBAAeJ,GAAMV,UAAU,UAA7C,2FACA,4BAAQU,GAAE,oBAAeA,GAAMV,UAAU,iBAAiBC,QAASoD,KAAKJ,WAAYQ,QAASJ,KAAKJ,YAAaC,IAiB1G,aAAXH,GAEA,oCACE,2BAAOjC,QAAO,mBAAcJ,GAAMV,UAAU,UAA5C,oCACA,4BAAQU,GAAE,mBAAcA,GAAMV,UAAU,oCAAoCC,QAASoD,KAAKL,gBACxF,kBAAC,IAAD,CAAiBhC,KAAM0C,IAAgBxC,cAAY,SACnD,0BAAMlB,UAAU,UAAhB,gD,GAxHa2D,aC+KRC,E,kDA7Kb,WAAYxD,GAAQ,IAAD,8BACjB,cAAMA,IA4BRyD,kBAAoB,kBAAM,EAAKxB,SAAS,CAACyB,aAAc,EAAKnB,MAAMmB,eA7B/C,EAgCnBxC,WAAa,SAACS,GAEZ,IAAMC,EAAgBD,EAAIC,cAG1BC,YAAW,WAEJD,EAAcE,SAASC,SAASC,gBAEnC,EAAKC,SAAS,CAAC0B,WAAW,MAE3B,IA3Cc,EA+CnBC,kBAAoB,SAACC,GAAD,OAAO,EAAK5B,SAAS,CAAC6B,YAAaD,EAAE1B,OAAO5B,SA/C7C,EAiDnBwD,kBAAoB,kBAAM,EAAK9B,SAAS,CAAC0B,WAAY,EAAKpB,MAAMoB,aAjD7C,EAoDnBK,cAAgB,SAACH,GAIf,GAHAA,EAAExB,iBAGE,EAAKE,MAAMuB,YAAa,CAAC,IAENhB,EAAS,EAAKP,MAA3BuB,YACAnB,EAAW,EAAK3C,MAAhB2C,OAGR,EAAK3C,MAAMmB,QAAQ,CACjB2B,OACAH,WAIF,EAAKV,SAAS,CACZ0B,WAAW,EACXG,YAAa,OAtEA,EA6EnBG,gBAAkB,WAAO,IAAD,EACmB,EAAKjE,MAAtCkE,EADc,EACdA,MAAOvB,EADO,EACPA,OAAQwB,EADD,EACCA,cAGnBD,EAAME,QAYRD,EARAD,EACGG,QAAO,SAAAvB,GAAI,OAAIA,EAAKH,SAAWA,KAE/B2B,QAAQ,SAACC,EAAYC,GAEpB,OADAD,EAAWC,EAASC,KAAO,KACpBF,IACL,IAEuB5B,GAG/B,EAAKV,SAAS,CAACyB,aAAa,KA7F5B,EAAKnB,MAAQ,CACXoB,WAAW,EACXG,YAAa,GACbJ,aAAa,GANE,E,iEAYjB,IAAMX,EAAYhB,SAASiB,cAAT,yBAAyCC,KAAKjD,MAAM2C,SAGlEI,GAAaA,IAAchB,SAASC,gBAEtCkB,IAASH,GAGTA,EAAUxC,MAAQ,GAElBwC,EAAUI,QAEVJ,EAAUxC,MAAQ0C,KAAKV,MAAMuB,e,+BA4EvB,IAAD,EACiEb,KAAKjD,MAArE2C,EADD,EACCA,OAAQ+B,EADT,EACSA,aAAcR,EADvB,EACuBA,MAAO5B,EAD9B,EAC8BA,SAAUjB,EADxC,EACwCA,WAAYqB,EADpD,EACoDA,SAE3D,OACE,yBAAK9C,UAAU,YACb,yBAAKA,UAAS,6CAAwC+C,IACpD,2BAAOjC,QAAO,2BAAsBiC,GAAU/C,UAAU,UAAxD,gFACA,4BACEU,GAAE,2BAAsBqC,GAAU/C,UAAWqD,KAAKV,MAAMmB,YAAc,kDAAoD,wBAC1H7D,QAASoD,KAAKQ,mBACZ,0BAAM7D,UAAU,UAAhB,+BACAqD,KAAKV,MAAMmB,YAAkD,kBAAC,IAAD,CAAiB9C,KAAMC,MAA3D,kBAAC,IAAD,CAAiBD,KAAM+D,OAGpD,wBAAI/E,UAAU,yBAEX8E,EAEAR,EAAME,OAAS,GAAK,0BAAMxE,UAAU,mBAAmBsE,EAAME,SAK7DnB,KAAKV,MAAMmB,YAOZ,oCACE,2BAAOhD,QAAO,4BAAuBiC,GAAU/C,UAAU,UAAzD,mDACA,4BAAQU,GAAE,4BAAuBqC,GAAU9C,QAASoD,KAAKgB,gBAAiBrE,UAAS,oCAAuCE,SAAUoE,EAAME,OAAS,GAAK,YAAxJ,eAPF,oCACE,2BAAO1D,QAAO,0BAAqBiC,GAAU/C,UAAU,UAAvD,oDACA,4BAAQU,GAAE,0BAAqBqC,GAAU9C,QAASoD,KAAKc,kBAAmBnE,UAAS,uBAA0BE,SAAUmD,KAAKV,MAAMoB,UAAY,WAAa,IAA3J,YAWN,wBAAI/D,UAAU,kBAGVqD,KAAKV,MAAMoB,WACX,wBAAI/D,UAAS,6BAAwB+C,IACnC,kBAAC,EAAD,CACErC,GAAIqC,EACJvB,UAAW6B,KAAKV,MAAMuB,YACtB7C,aAAcgC,KAAKe,cACnB1C,WAAY2B,KAAKc,kBACjB7C,WAAY+B,KAAK/B,WACjBhB,aAAc+C,KAAKW,qBAMvBX,KAAKjD,MAAMkE,MAAMU,KAAI,gBAAEH,EAAF,EAAEA,IAAK3B,EAAP,EAAOA,KAAMH,EAAb,EAAaA,OAAb,OACnB,kBAAC,EAAD,CACE8B,IAAKA,EACLnE,GAAImE,EACJ3B,KAAMA,EACNH,OAAQA,EACRL,SAAUA,EACVjB,WAAYA,EACZqB,SAAUA,a,GApKHa,aCKRsB,EAVA,kBACb,gCACE,yBAAKjF,UAAU,4BACb,6CACA,yCAAc,uBAAGkF,KAAK,0BAAR,eAAd,OAAkE,uBAAGA,KAAK,0BAA0B3C,OAAO,SAAS4C,IAAI,uBAAtD,iBAClE,sDAA2B,uBAAGD,KAAK,qBAAqB3C,OAAO,SAAS4C,IAAI,uBAAjD,mBAA3B,QAA0H,uBAAGD,KAAK,kDAAkD3C,OAAO,SAAS4C,IAAI,uBAA9E,cCgLjHC,G,wDA9Kb,aAAe,IAAD,8BACZ,gBAqCFtF,eAAiB,SAACuF,GAEhBjG,EAASkG,WAAWC,IAAI,SAASC,SAGjC,EAAKnD,SAAS,CAACoD,YAAa,MA3ChB,EA+CdlB,cAAgB,SAACmB,EAAe3C,GAE9B3D,EAASkG,WAAWC,IAAI,SAASI,OAAOD,GAGxC,IAAME,EAAoB,EAAKjD,MAAM8C,YAAYhB,QAAO,SAAAoB,GAAI,OAAIA,EAAK9C,SAAWA,KAChF,EAAKV,SAAS,CAACoD,YAAaG,KArDhB,EAyDdrE,QAAU,SAAC8D,GAAD,OAAajG,EAASkG,WAAWC,IAAI,SAASO,KAAKT,IAzD/C,EA4DdU,WAAa,SAAClB,EAAKmB,GAAN,OAAmB5G,EAASkG,WAAWC,IAAI,SAAWV,GAAKc,OAAO,CAACzC,KAAM8C,KA5DxE,EA+DdvE,WAAa,SAACoD,GAAD,OAASzF,EAASkG,WAAWC,IAAI,SAASU,MAAMpB,GAAKW,UA/DpD,EAkEd1C,SAAW,SAAC+B,EAAK9B,EAAQmD,GACvB,IAAMC,EAAQ/G,EAASkG,WAAWC,IAAI,SAAWV,GACzCuB,EAAe,EAAKzD,MAApByD,WAGFC,EAAaD,EAAWE,QAAQvD,GAGlCwD,EAASF,EAAaH,GAI1BK,EAASA,EAAS,EAAI,EAAIA,GAAUH,EAAW5B,OAAS4B,EAAW5B,OAAS,EAAI+B,KAGrEF,GAAcF,EAAMR,OAAO,CAAC5C,OAAQqD,EAAWG,MAjF9C,EAqFdjG,aAAe,SAACyB,GAAS,IAAD,EACEA,EAAIQ,OAApB9B,EADc,EACdA,KAAME,EADQ,EACRA,MAGD,gBAATF,GAA0B,EAAKkC,MAAM6D,UAAUhC,OAEjD,EAAKnC,SAAL,eAAgB5B,EAAOE,GAAQ,EAAK8F,cAIpC,EAAKpE,SAAL,eAAgB5B,EAAOE,KA/Fb,EAoGd8F,aAAe,WAAO,IAAD,EACe,EAAK9D,MAA/BtC,EADW,EACXA,YAAamG,EADF,EACEA,UAEfE,EAAe,IAAIC,OAAOtG,EAAa,KAGvCoF,EAAce,EAAU/B,QAAO,gBAAEvB,EAAF,EAAEA,KAAF,OAAYwD,EAAaE,KAAK1D,MAGnE,EAAKb,SAAS,CAACoD,iBA7GH,EAiHdlF,YAAc,WAAQ,EAAK8B,SAAS,CAAChC,YAAa,GAAIoF,YAAa,MA9GjE,EAAK9C,MAAQ,CACXyD,WAAY,CAAC,OAAQ,aAAc,YACnCI,UAAW,GACXK,WAAY,MACZxG,YAAa,GACboF,YAAa,IARH,E,gEAaO,IAAD,OAEJrG,EAASkG,WAAWC,IAAI,SAGhCuB,GAAG,SAAS,SAAAC,GAChB,IAAMC,EAAYD,EAASE,MAGrBT,EAAY,GAClB,IAAK,IAAM3B,KAAOmC,EAAW,CAC3B,IAAMpC,EAAW,CACfC,IAAKA,EACL3B,KAAM8D,EAAUnC,GAAK3B,KACrBH,OAAQiE,EAAUnC,GAAK9B,QAEzByD,EAAUV,KAAKlB,GAIjB,EAAKvC,SAAS,CAACmE,mB,+BAqFjB,IAAM1B,EAAe,CACnBoC,KAAM,OACNC,WAAY,cACZC,SAAU,aAEJ7F,EAAwG8B,KAAxG9B,QAASuB,EAA+FO,KAA/FP,SAAUrB,EAAqF4B,KAArF5B,WAAYsE,EAAyE1C,KAAzE0C,WAAYzF,EAA6D+C,KAA7D/C,aAAcR,EAA+CuD,KAA/CvD,eAAgByE,EAA+BlB,KAA/BkB,cAAehE,EAAgB8C,KAAhB9C,YAPzF,EAQiE8C,KAAKV,MAArEyD,EARD,EAQCA,WAAYI,EARb,EAQaA,UAAWK,EARxB,EAQwBA,WAAYpB,EARpC,EAQoCA,YAAapF,EARjD,EAQiDA,YAElDgH,EAAShH,EAAYmE,OAAqBiB,EAAZe,EAC9Bc,EAAuB,QAAfT,EAAuBT,EAAa,CAACS,GAEnD,OACE,yBAAK7G,UAAU,iBAEb,kBAAC,EAAD,CAAQF,eAAgBA,EAAgBC,WAAYyG,EAAUhC,SAG9D,8BACE,yBAAKxE,UAAU,WACb,kBAAC,EAAD,CACEM,aAAcA,EACdD,YAAaA,EACbE,YAAaA,IAGf,6BAASP,UAAU,aAEfsH,EAAMtC,KAAI,SAACjC,EAAQwE,GACjB,IAAMjD,EAAQ+C,EAAM5C,QAAO,SAAAvB,GAAI,OAAIA,EAAKH,SAAWA,KACnD,OACE,kBAAC,EAAD,CACE/C,UAAU,WACV6E,IAAK9B,EACLA,OAAQA,EACR+B,aAAcA,EAAa/B,GAC3BuB,MAAOA,EACP/C,QAASA,EACTuB,SAAUA,EACVrB,WAAYA,EACZiB,SAAUqD,EACVxB,cAAeA,UAU7B,kBAAC,EAAD,W,GAzKUZ,cCIE6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5F,SAAS6F,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b503530a.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// *** USE YOUR CONFIG OBJECT ***\n// Initialize Firebase\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDBqq9f4CwQkWmvi0jA9or1uqWUTx73r_E\",\n  authDomain: \"andre-facey-project-five.firebaseapp.com\",\n  databaseURL: \"https://andre-facey-project-five.firebaseio.com\",\n  projectId: \"andre-facey-project-five\",\n  storageBucket: \"andre-facey-project-five.appspot.com\",\n  messagingSenderId: \"940406876843\",\n  appId: \"1:940406876843:web:d25925e9d0cc096f1b65ee\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React from 'react';\n\nconst Header = ({clearTaskboard, numOfTasks}) => (\n  <header>\n    <div className=\"wrapper displayContainer\">\n      <div className=\"header__text\">\n        <h1>Task Board</h1>\n        <p>Add and track tasks to increase productivity!</p>\n      </div>\n      <button onClick={clearTaskboard}  className=\"btn btn--black btn__taskBoard btn__taskBoard--clear\" disabled={ numOfTasks ? \"\" : \"disabled\" }>Clear Task Board</button>\n    </div>\n  </header>\n)\n\nexport default Header;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faTimes } from '@fortawesome/free-solid-svg-icons';\n\nconst TaskBoardMenu = props => {\n  const { searchTerms, handleChange, clearSearch } = props;\n\n  return(\n    <section className=\"taskBoard__menu\">\n\n      {/* Task List Filter Inputs */}\n      <fieldset className=\"taskBoard__listFilter\">\n        <div className=\"inputContainer__filter\">\n          <legend className=\"srOnly\">Filter the task items by list</legend>\n          <input type=\"radio\" className=\"srOnly taskBoard__filterInput\" name=\"listFilter\" id=\"filterAll\" value=\"all\" onChange={handleChange} defaultChecked />\n          <label className=\"btn btn--orange\" htmlFor=\"filterAll\">All</label>\n          \n          <input type=\"radio\" className=\"srOnly taskBoard__filterInput\" name=\"listFilter\" id=\"filterOpen\" value=\"open\" onChange={handleChange} />\n          <label className=\"btn btn--red\" htmlFor=\"filterOpen\">Open</label>\n          \n          <input type=\"radio\" className=\"srOnly taskBoard__filterInput\" name=\"listFilter\" id=\"filterInProgress\" value=\"inProgress\" onChange={handleChange} />\n          <label className=\"btn btn--blue\" htmlFor=\"filterInProgress\">In Progress</label>\n          \n          <input type=\"radio\" className=\"srOnly taskBoard__filterInput\" name=\"listFilter\" id=\"filterComplete\" value=\"complete\" onChange={handleChange} />\n          <label className=\"btn btn--green\" htmlFor=\"filterComplete\">Complete</label>\n        </div>\n      </fieldset>\n\n      {/* Task List Search Bar */}\n      <div className=\"inputContainer__searchBar\">\n        <label htmlFor=\"searchTerms\" className=\"srOnly\">Search for task items</label>\n        <input className=\"taskBoard__searchBar\" type=\"text\" name=\"searchTerms\" id=\"searchTerms\" placeholder=\"search\" onChange={handleChange} value={searchTerms} />\n        {\n          // Check if the user has started a search\n          searchTerms ?\n          // Display button to clear the search terms\n          <>\n            <label htmlFor=\"searchBarBtn\" className=\"srOnly\">Button to clear the search terms</label>\n            <button id=\"searchBarBtn\" className=\"taskBoard__searchBarBtn\" onClick={clearSearch}>\n              <FontAwesomeIcon className=\"taskBoard__searchBarIcon--clear\" icon={faTimes} aria-hidden=\"true\"/>\n            </button>\n          </>\n          :\n          // Display search icon to visually indicate that tasks can be searched for\n          <FontAwesomeIcon className=\"taskBoard__searchBarIcon\" icon={faSearch} aria-hidden=\"true\"/>\n        }\n      </div>\n\n    </section>\n  )\n}\n\nexport default TaskBoardMenu;","import React from 'react';\n\nconst TaskForm = props => {\n  const { id, type, handleSubmit, handleBlur, handleChange, addTask, taskValue, removeTask, toggleForm } = props;\n\n  return (\n    <>\n    <h3 className=\"taskForm__heading\">{type === 'edit' ? 'Edit Task' : 'New Task'}</h3>\n    <form action=\"#\" onSubmit={handleSubmit} onBlur={handleBlur} className=\"taskForm\">\n      <textarea className=\"taskForm__input\" id={`taskFormInput_${id}`} name=\"taskFormInput\" onChange={handleChange} value={taskValue}></textarea>\n      {type === \"edit\" && <button type=\"button\" onClick={removeTask} className=\"btn btn--red\">Delete</button>}\n      <button type=\"button\" onClick={toggleForm} className=\"btn btn--orange\">Cancel</button>\n      {type === \"add\" && <button type=\"button\" onClick={addTask} className=\"btn__task btn__task--add\">Add</button>}\n      <button className=\"btn btn--green\">Save</button>\n    </form>  \n    </>\n  );\n}\n\nexport default TaskForm;","import React, { Component} from 'react';\nimport TaskForm from './TaskForm.js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons';\nimport autosize from 'autosize';\n\nclass TaskItem extends Component {\n  constructor(props) {\n    super()\n\n    this.state = {\n      taskFormInput: props.task,\n      isEditing: false,\n    }\n  }\n  \n  // --------------------------- componentDidUpdate\n  componentDidUpdate() {\n    const taskInput = document.querySelector(`#taskFormInput_${this.props.id}`);\n\n    // only go to the end of the text if the input is not already focused\n    if (taskInput && taskInput !== document.activeElement) {\n      // autosize the textarea height as needed\n      autosize(taskInput);\n\n      // set the cursor to the end of the text input by setting value to \"\" > focus > value back to state.taskFormInput\n      taskInput.value = \"\";\n      // focus on the input\n      taskInput.focus();\n      // set the input value\n      taskInput.value = this.state.taskFormInput;\n    } \n\n  }\n\n  // --------------------------- handleBlur\n  handleBlur = (evt) => {\n    // implementation from https://gist.github.com/pstoica/4323d3e6e37e8a23dd59\n    const currentTarget = evt.currentTarget;\n\n    // Check the newly focused element in the next tick of the event loop\n    setTimeout(() => {\n      // Check if the new activeElement is a child of the original container\n      if (!currentTarget.contains(document.activeElement)) {\n        // if new focused element is not contained in the form ... toggle out of editing the task\n        this.setState({isEditing: false});\n      }\n    }, 0);\n  }\n\n  // --------------------------- handleChange\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    })\n  }\n\n  // --------------------------- handleEditSubmit\n  handleEditSubmit = (evt) => {\n    evt.preventDefault();\n  \n    this.props.editTask(this.props.id, this.state.taskFormInput);\n    \n    this.setState({isEditing: false});\n  }\n\n  // --------------------------- handleMovePrev\n  handleMovePrev = () => this.props.moveTask(this.props.id, this.props.status, -1);\n  // --------------------------- handleMoveNext\n  handleMoveNext = () => this.props.moveTask(this.props.id, this.props.status, 1);\n\n  // --------------------------- removeTask\n  removeTask = () => this.props.removeTask(this.props.id);\n  \n  // --------------------------- toggleEdit\n  toggleEdit = () => this.setState({ isEditing: !this.state.isEditing });\n\n  // --------------------------- render\n  render() {\n\n    const { id, task, status } = this.props;\n  \n    return(\n      <li className={`taskItem taskItem--${status}`} >\n      \n      {\n        // If status is 'open' DO NOT render the \"previous\" status button\n        status !== 'open' \n        &&\n        <>\n          <label htmlFor={`btnPrev--${id}`} className=\"srOnly\">Move task to the previous status</label>\n          <button id={`btnPrev--${id}`} className=\"taskItem__btn taskItem__btn--prev\" onClick={this.handleMovePrev}>\n            <FontAwesomeIcon icon={faChevronLeft} aria-hidden=\"true\" />\n            <span className=\"srOnly\">Move task to the previous status</span>\n          </button>\n        </>\n      }\n    \n    { \n      // if not in editing mode render the task as text ... otherwise render the task form to edit the task\n      !this.state.isEditing \n        ? <>\n            <label htmlFor={`taskItem--${id}`} className=\"srOnly\">Click or focus on the text of the task to enter edit mode and modify or delete the task</label>\n            <button id={`taskItem--${id}`} className=\"taskItem__text\" onClick={this.toggleEdit} onFocus={this.toggleEdit}>{task}</button> \n            {/* <p className=\"taskItem__text\" onClick={this.toggleEdit} onFocus={this.toggleEdit} tabIndex=\"0\">{task}</p>  */}\n          </>\n        : <TaskForm \n            id={id}\n            type=\"edit\"\n            handleSubmit={this.handleEditSubmit} \n            handleBlur={this.handleBlur} \n            handleChange={this.handleChange}\n            taskValue={this.state.taskFormInput}\n            removeTask={this.removeTask}\n            toggleForm={this.toggleEdit}\n          />\n    }\n      \n    {\n      // If status is 'complete' DO NOT render the \"next\" status button\n      status !== \"complete\" \n      &&\n      <>\n        <label htmlFor={`btnNext--${id}`} className=\"srOnly\">Move task to the previous status</label>\n        <button id={`btnNext--${id}`} className=\"taskItem__btn taskItem__btn--next\" onClick={this.handleMoveNext}>\n          <FontAwesomeIcon icon={faChevronRight} aria-hidden=\"true\"/>\n          <span className=\"srOnly\">Click to move task to the next status</span>\n        </button>\n      </>\n    }\n    </li>\n    ) \n  }\n}\n\nexport default TaskItem;","import React, { Component } from 'react';\nimport TaskItem from './TaskItem';\nimport TaskForm from './TaskForm';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport autosize from 'autosize';\n\nclass TaskList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isStaging: false,\n      stagingTask: \"\",\n      menuEnabled: false\n    }\n  }\n\n  // --------------------------- componentDidUpdate\n  componentDidUpdate() {\n    const taskInput = document.querySelector(`#taskFormInput_${this.props.status}`);\n\n    // only go to the end of the text if the input is not already focused\n    if (taskInput && taskInput !== document.activeElement) {\n      // autosize the textarea height as needed\n      autosize(taskInput);\n\n      // set the cursor to the end of the text input by setting value to \"\" > focus > value back to state.stagingTask\n      taskInput.value = \"\";\n      // focus on the input\n      taskInput.focus();\n      // set the input value\n      taskInput.value = this.state.stagingTask;\n    } \n  }\n\n  // --------------------------- toggleMenuEnabled\n  toggleMenuEnabled = () => this.setState({menuEnabled: !this.state.menuEnabled});\n\n  // --------------------------- handleBlur\n  handleBlur = (evt) => {\n    // implementation from https://gist.github.com/pstoica/4323d3e6e37e8a23dd59\n    const currentTarget = evt.currentTarget;\n\n    // Check the newly focused element in the next tick of the event loop\n    setTimeout(() => {\n      // Check if the new activeElement is a child of the original container\n      if (!currentTarget.contains(document.activeElement)) {\n        // if new focused element is not contained in the form ... toggle out of staging a task\n        this.setState({isStaging: false});\n      }\n    }, 0);\n  }\n\n  // --------------------------- handleStagingTask\n  handleStagingTask = (e) => this.setState({stagingTask: e.target.value});\n  // --------------------------- toggleTaskStaging\n  toggleTaskStaging = () => this.setState({isStaging: !this.state.isStaging});\n\n  // --------------------------- handleAddTask\n  handleAddTask = (e) => {\n    e.preventDefault();\n\n    // prevent adding empty tasks\n    if (this.state.stagingTask) {\n\n      const { stagingTask: task } = this.state;\n      const { status } = this.props;\n\n      // add task\n      this.props.addTask({\n        task,\n        status\n      })\n\n      // reset staging states\n      this.setState({\n        isStaging: false, \n        stagingTask: \"\",\n      });\n    }\n    \n  }\n\n  // --------------------------- handleClearList\n  handleClearList = () => {\n    const { tasks, status, clearTaskList } = this.props;\n    \n    // if task lst has items\n    if (tasks.length) {\n\n      // filter out the full task items list to those with the status of the task list\n      const taskListItems = \n      tasks\n        .filter(task => task.status === status)\n        // create an object with the keys of the task list items with a null value\n        .reduce(((deleteList, taskItem) => { \n          deleteList[taskItem.key] = null;\n          return deleteList;\n        }), {});\n      // remove the filtered items from firebase\n      clearTaskList(taskListItems, status)  \n    }\n    // toggle tasklist menu to false\n    this.setState({menuEnabled: false});\n  }\n  \n  // --------------------------- render\n  render() {\n    const { status, statusString, tasks, editTask, removeTask, moveTask } = this.props;\n\n    return(\n      <div className=\"taskList\">\n        <div className={`taskList__header taskList__header--${status}`}>\n          <label htmlFor={`taskListMenuBtn--${status}`} className=\"srOnly\">Click the button to toggle the task list menu to clear the task list's items</label>\n          <button \n            id={`taskListMenuBtn--${status}`} className={this.state.menuEnabled ? \"btn taskList__menuBtn taskList__menuBtn--active\" : \"btn taskList__menuBtn\" } \n            onClick={this.toggleMenuEnabled}>\n              <span className=\"srOnly\">Toggle the task list's menu</span>\n            {!this.state.menuEnabled ? <FontAwesomeIcon icon={faBars} /> : <FontAwesomeIcon icon={faTimes} /> }  \n          </button>\n          \n          <h2 className=\"taskList__headingText\">\n            {/* Task List Name */}\n            {statusString} \n            {/* Task List Item Counter */}\n            {tasks.length > 0 && <span className=\"taskList__count\">{tasks.length}</span>}\n          </h2>\n\n          {\n            // Toggle task list header icon depending if the menuEnabled is true\n            !this.state.menuEnabled \n            ? \n            <>\n              <label htmlFor={`taskListAddBtn--${status}`} className=\"srOnly\">Click the button to toggle the add new task form</label>\n              <button id={`taskListAddBtn--${status}`} onClick={this.toggleTaskStaging} className={`btn taskList__addBtn`} disabled={this.state.isStaging ? 'disabled' : ''}>+ Task</button>\n            </>\n            : \n            <>\n              <label htmlFor={`taskListClearBtn--${status}`} className=\"srOnly\">Click the button to clear the task list's items</label>\n              <button id={`taskListClearBtn--${status}`} onClick={this.handleClearList} className={`btn btn--black taskList__clearBtn`} disabled={tasks.length ? '' : 'disabled' }>Clear List</button>\n            </>\n          }\n          \n          \n        </div>\n        <ul className=\"taskList__list\">\n          { \n          // render a TaskForm to add a new task for the task list\n            this.state.isStaging && \n            <li className={`taskItem taskItem--${status}`}>\n              <TaskForm \n                id={status}\n                taskValue={this.state.stagingTask}\n                handleSubmit={this.handleAddTask}\n                toggleForm={this.toggleTaskStaging}\n                handleBlur={this.handleBlur}\n                handleChange={this.handleStagingTask}\n              />\n            </li>\n          }\n          { \n          // render the taskform items for the list\n            this.props.tasks.map(({key, task, status}) => (\n              <TaskItem \n                key={key} \n                id={key} \n                task={task} \n                status={status} \n                editTask={editTask}\n                removeTask={removeTask} \n                moveTask={moveTask} />)\n            )\n          }\n        </ul>\n      </div>\n    )\n\n  }\n\n}\nexport default TaskList;","import React from 'react'\n\nconst Footer = () => (\n  <footer>\n    <div className=\"wrapper displayContainer\">\n      <p>Copyright 2020</p> \n      <p>Created By <a href=\"https://andrefacey.com\">Andre Facey</a> at <a href=\"https://junocollege.com\" target=\"_blank\" rel=\"noopener noreferrer\">Juno College</a></p>\n      <p>Design Inspiration from <a href=\"https://scottrs.ca\" target=\"_blank\" rel=\"noopener noreferrer\">Scott Sobere-Yu</a> and <a href=\"https://dribbble.com/shots/6250762-Kanban-Board\" target=\"_blank\" rel=\"noopener noreferrer\">Nikita</a></p>\n    </div>\n  </footer>\n);\n\nexport default Footer;","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport Header from './components/Header.js';\nimport TaskBoardMenu from './components/TaskBoardMenu.js';\nimport TaskList from './components/TaskList.js';\nimport Footer from './components/Footer.js';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n      taskStatus: ['open', 'inProgress', 'complete'],\n      taskItems: [],\n      listFilter: \"all\",\n      searchTerms: \"\",\n      searchItems: []\n    }\n  }\n\n  // --------------------------- componentDidMount\n  componentDidMount() {\n    // db reference of \"tasks\"\n    const dbRef = firebase.database().ref(\"tasks\");\n\n    // listener for any value change on the db reference\n    dbRef.on('value', response => {\n      const tasksData = response.val();\n      \n      // create empty array to store data retrieved from db later\n      const taskItems = [];\n      for (const key in tasksData) {\n        const taskItem = {\n          key: key,\n          task: tasksData[key].task,\n          status: tasksData[key].status\n        }\n        taskItems.push(taskItem);\n      }\n      \n      // update state with the taskItems retrieved from the database\n      this.setState({taskItems});\n    });\n  }\n\n  // --------------------------- clearTaskboard\n  clearTaskboard = (newTask) => {\n    // remove all items in firebase\n    firebase.database().ref(\"tasks\").remove();\n\n    // reset searchItems to empty\n    this.setState({searchItems: []})\n  }\n\n  // --------------------------- clearTaskList\n  clearTaskList = (taskListItems, status) => {\n    // pass an object of keys with null values to clear multiple items\n    firebase.database().ref(\"tasks\").update(taskListItems);\n\n    // update the searchItems with the filtered out items that may have been removed\n    const filterSearchItems = this.state.searchItems.filter(item => item.status !== status);\n    this.setState({searchItems: filterSearchItems})\n  }\n\n  // --------------------------- addTask\n  addTask = (newTask) => firebase.database().ref(\"tasks\").push(newTask);\n  \n  // --------------------------- updateTask\n  updateTask = (key, newValue) => firebase.database().ref('tasks/' + key).update({task: newValue});\n\n  // --------------------------- removeTask\n  removeTask = (key) => firebase.database().ref('tasks').child(key).remove();\n\n  // --------------------------- moveTask\n  moveTask = (key, status, direction) => {\n    const dbRef = firebase.database().ref('tasks/' + key);\n    const { taskStatus } = this.state;\n\n    // find current status index\n    const currentIdx = taskStatus.indexOf(status);\n\n    // store new index as the value of currentIdx + the direction (1 or - 1)\n    let newIdx = currentIdx + direction;\n\n    // prevent out of range indexes of the taskStatus array\n    // if newIdx < 0 - set to 0, if newIdx gte taskStatus length - set to last item in array, otherwise keep the value\n    newIdx = newIdx < 0 ? 0 : newIdx >= taskStatus.length ? taskStatus.length - 1 : newIdx;\n\n    // if task has a new position update it in the database\n    newIdx !== currentIdx && dbRef.update({status: taskStatus[newIdx]});\n  }\n\n  // --------------------------- handleChange\n  handleChange = (evt) => {\n    const { name, value } = evt.target;\n    \n    // call handleSearch if the input searchTerms input was changed and there are tasks\n    if (name === 'searchTerms' && this.state.taskItems.length) {\n      // set seachTerms state to value, and then call this.handleSearch\n      this.setState({[name]: value}, this.handleSearch);\n    }\n    else { \n      // otherwise update other inputs in state by their name and input value\n      this.setState({[name]: value});\n    }\n  }\n\n  // --------------------------- handleSearch\n  handleSearch = () => {\n    const { searchTerms, taskItems }= this.state;\n    // create regex for search terms globall/case insensistive\n    const searchString = new RegExp(searchTerms, 'i');\n\n    // filter out tasks by test against search terms\n    const searchItems = taskItems.filter(({task}) => searchString.test(task));\n\n    // store filtered results into searchItems state to preserve the state of the taskItems\n    this.setState({searchItems});\n  }\n\n  // --------------------------- handleSearch\n  clearSearch = () => { this.setState({searchTerms: \"\", searchItems: []}); }\n\n  // --------------------------- render\n  render() {\n    // heading text for task status lists\n    const statusString = {\n      open: \"Open\",\n      inProgress: \"In Progress\",\n      complete: \"Completed\"\n    } \n    const { addTask, moveTask, removeTask, updateTask, handleChange, clearTaskboard, clearTaskList, clearSearch } = this;\n    const { taskStatus, taskItems, listFilter, searchItems, searchTerms } = this.state;\n    \n    const items = !searchTerms.length ? taskItems : searchItems;\n    const lists = listFilter === 'all' ? taskStatus : [listFilter];\n\n    return (\n      <div className=\"pageContainer\">\n        {/* START of HEADER */}\n        <Header clearTaskboard={clearTaskboard} numOfTasks={taskItems.length} />\n        \n        {/* START of MAIN */}\n        <main>\n          <div className=\"wrapper\">\n            <TaskBoardMenu \n              handleChange={handleChange}\n              searchTerms={searchTerms}\n              clearSearch={clearSearch}\n            />\n            \n            <section className=\"taskLists\">\n              { \n                lists.map((status, idx) => {\n                  const tasks = items.filter(task => task.status === status);\n                  return (\n                    <TaskList \n                      className=\"taskList\" \n                      key={status} \n                      status={status}\n                      statusString={statusString[status]}\n                      tasks={tasks} \n                      addTask={addTask}\n                      moveTask={moveTask}\n                      removeTask={removeTask}\n                      editTask={updateTask}\n                      clearTaskList={clearTaskList}\n                    />\n                  )\n                })\n              } \n            </section>\n          </div>\n        </main>\n\n        {/* START of FOOTER */}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}