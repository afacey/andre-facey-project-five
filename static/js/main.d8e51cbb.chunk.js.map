{"version":3,"sources":["firebase.js","TaskItem.js","TaskList.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","TaskItem","props","handleChange","evt","setState","target","id","value","handleEditSubmit","preventDefault","editTask","state","taskEdit","toggleEdit","handleMovePrev","moveTask","status","handleMoveNext","removeTask","isEditing","task","input","document","querySelector","autosize","focus","this","className","onClick","icon","faChevronLeft","aria-hidden","action","onSubmit","name","onChange","type","faChevronRight","Component","TaskList","toggleTaskStaging","isStaging","handleStagingTask","e","stagingTask","handleAddTask","addTask","tasks","children","length","disabled","faEllipsisV","htmlFor","placeholder","autoComplete","map","key","App","clearTaskboard","newTask","database","ref","remove","push","updateTask","newValue","update","child","direction","dbRef","taskStatus","currentIdx","indexOf","newIdx","taskItems","on","response","tasksData","val","taskItem","statusString","open","inProgress","complete","idx","filter","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d8e51cbb.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// *** USE YOUR CONFIG OBJECT ***\n// Initialize Firebase\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDBqq9f4CwQkWmvi0jA9or1uqWUTx73r_E\",\n  authDomain: \"andre-facey-project-five.firebaseapp.com\",\n  databaseURL: \"https://andre-facey-project-five.firebaseio.com\",\n  projectId: \"andre-facey-project-five\",\n  storageBucket: \"andre-facey-project-five.appspot.com\",\n  messagingSenderId: \"940406876843\",\n  appId: \"1:940406876843:web:d25925e9d0cc096f1b65ee\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React, { Component} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons'\nimport autosize from 'autosize'\n\nclass TaskItem extends Component {\n  constructor(props) {\n    super()\n\n    this.state = {\n      taskEdit: props.task,\n      isEditing: false,\n    }\n  }\n\n  componentDidUpdate() {\n    const input = document.querySelector('#taskEdit');\n    if (input) {\n      autosize(input);\n      input.focus();\n    } \n\n  }\n\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.id]: evt.target.value\n    })\n  }\n\n  handleEditSubmit = (evt) => {\n    evt.preventDefault();\n    this.props.editTask(this.props.id, this.state.taskEdit);\n    this.toggleEdit();\n  }\n\n  handleMovePrev = () => this.props.moveTask(this.props.id, this.props.status, -1);\n  handleMoveNext = () => this.props.moveTask(this.props.id, this.props.status, 1);\n\n  removeTask = () => this.props.removeTask(this.props.id);\n  \n  toggleEdit = () => { this.setState({ isEditing: !this.state.isEditing }); }\n\n  render() {\n\n    const { task, status } = this.props;\n  \n    return(\n      <li className={`taskItem taskItem--${status}`} >\n      \n      {\n        status !== 'open' &&\n        <button className=\"btn__task btn__task--prev\" onClick={this.handleMovePrev}>\n          <FontAwesomeIcon icon={faChevronLeft} aria-hidden=\"true\" />\n          <span className=\"sr-only\">Click to move task to the next status</span>\n        </button>\n      }\n    \n    { \n      !this.state.isEditing \n        ? <p className=\"taskItem__text\" onClick={this.toggleEdit}>{task}</p> \n        :\n          <form action=\"#\" onSubmit={this.handleEditSubmit} className=\"clearfix\">\n            {/* TODO remove autocomplete for submission */}\n            <textarea className=\"taskItem__editInput\" id=\"taskEdit\" name=\"taskEdit\" onChange={this.handleChange} value={this.state.taskEdit}>\n            </textarea>\n            <button type=\"button\" onClick={this.removeTask} className=\"btn__task btn__task--delete\">Delete</button>\n            <button type=\"button\" onClick={this.toggleEdit} className=\"btn__task btn__task--edit\">Cancel</button>\n            <button className=\"btn__task btn__task--save\">Save</button>\n          </form>  \n    }\n      \n    {\n      status !== \"complete\" &&\n        <button className=\"btn__task btn__task--next\" onClick={this.handleMoveNext}>\n          <FontAwesomeIcon icon={faChevronRight} aria-hidden=\"true\"/>\n          <span className=\"sr-only\">Click to move task to the next status</span>\n        </button>\n    }\n    </li>\n    ) \n  }\n}\n\nexport default TaskItem;","import React, { Component } from 'react';\nimport TaskItem from './TaskItem';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEllipsisV } from '@fortawesome/free-solid-svg-icons';\n\nclass TaskList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isStaging: false,\n      stagingTask: \"\",\n    }\n  }\n\n  toggleTaskStaging = () => {\n    this.setState({isStaging: !this.state.isStaging});\n  }\n\n  handleStagingTask = (e) => {\n    this.setState({stagingTask: e.target.value})\n  }\n\n  handleAddTask = (e) => {\n    e.preventDefault();\n\n    if (this.state.stagingTask) {\n      this.props.addTask({\n        task: this.state.stagingTask,\n        status: this.props.status\n      })\n\n      this.setState({isStaging: false, stagingTask: \"\"});\n    }\n    \n  }\n  \n  render() {\n    const { status, tasks, children, editTask, removeTask, moveTask } = this.props;\n  \n    return(\n      <div className=\"taskList\">\n        <h2 className={`taskList__heading taskList__heading--${status} clearfix`}>\n          {children} \n          {tasks.length > 0 && <span className=\"taskList__count\">{tasks.length}</span>}\n          <button onClick={this.toggleTaskStaging} className={`btn__taskList btn__taskList--add`} disabled={ tasks.length ? \"\" : \"disabled\" }>+ Task</button>\n          <button className=\"btn__taskList btn__taskList--menu\"><FontAwesomeIcon icon={faEllipsisV} /></button>\n        </h2>\n        <ul className=\"taskList__list\">\n          { (this.state.isStaging || !tasks.length) && <li><form action=\"#\" onSubmit={(e) => this.handleAddTask(e)}>\n              <label htmlFor=\"task\" className=\"sr-only\">Add A New Task</label>\n              {/* TODO remove autocomplete for submission */}\n              <input onChange={this.handleStagingTask} type=\"text\" name=\"task\" id=\"task\" placeholder=\"add a task\" value={this.state.stagingTask} autoComplete=\"off\"/>\n              <button>Add Task!</button>\n            </form></li>}\n          { \n            this.props.tasks.map(({key, task, status}) => (\n              <TaskItem \n                key={key} \n                id={key} \n                task={task} \n                status={status} \n                editTask={editTask}\n                removeTask={removeTask} \n                moveTask={moveTask} />)\n            )\n          }\n        </ul>\n      </div>\n    )\n\n  }\n\n}\nexport default TaskList;","import React, { Component } from 'react';\nimport firebase from './firebase.js'\nimport TaskList from './TaskList.js'\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n      taskStatus: ['open', 'inProgress', 'complete'],\n      taskItems: [],\n    }\n  }\n\n  // --------------------------- componentDidMount\n  componentDidMount() {\n    // db reference of \"tasks\"\n    const dbRef = firebase.database().ref(\"tasks\");\n\n    // listener for any value change on the db reference\n    dbRef.on('value', response => {\n      const tasksData = response.val();\n      \n      // create empty array to store data retrieved from db later\n      const taskItems = [];\n      for (const key in tasksData) {\n        const taskItem = {\n          key: key,\n          task: tasksData[key].task,\n          status: tasksData[key].status\n        }\n        taskItems.push(taskItem);\n      }\n      \n      // update state with the taskItems retrieved from the database\n      this.setState({taskItems});\n    });\n  }\n  // --------------------------- clearTaskboard\n  clearTaskboard = (newTask) => firebase.database().ref(\"tasks\").remove();\n\n  // --------------------------- addTask\n  addTask = (newTask) => firebase.database().ref(\"tasks\").push(newTask);\n  \n  // --------------------------- updateTask\n  updateTask = (key, newValue) => firebase.database().ref('tasks/' + key).update({task: newValue});\n\n  // --------------------------- removeTask\n  removeTask = (key) => firebase.database().ref('tasks').child(key).remove();\n\n  // --------------------------- moveTask\n  moveTask = (key, status, direction) => {\n    const dbRef = firebase.database().ref('tasks/' + key);\n    const { taskStatus } = this.state;\n\n    // find current status index\n    const currentIdx = taskStatus.indexOf(status);\n\n    // store new index as the value of currentIdx + the direction (1 or - 1)\n    let newIdx = currentIdx + direction;\n\n    // prevent out of range indexes of the taskStatus array\n    // if newIdx < 0 - set to 0, if newIdx gte taskStatus length - set to last item in array, otherwise keep the value\n    newIdx = newIdx < 0 ? 0 : newIdx >= taskStatus.length ? taskStatus.length - 1 : newIdx;\n\n    // if task has a new position update it in the database\n    newIdx !== currentIdx && dbRef.update({status: taskStatus[newIdx]});\n  }\n\n  // --------------------------- render\n  render() {\n    // heading text for task status lists\n    const statusString = {\n      open: \"Open\",\n      inProgress: \"In Progress\",\n      complete: \"Completed\"\n    }\n\n    return (\n      <div className=\"App\">\n        {/* START of HEADER */}\n        <header className=\"App-header\">\n          {/* TODO flex-container still needed? */}\n          <div className=\"wrapper flex-container\">\n            <h1>Task Board</h1>\n          </div>\n        </header>\n        \n        {/* START of MAIN */}\n        <main className=\"App-main\">\n          <div className=\"wrapper\">\n            <div className=\"taskBoard__menu\">\n\n            <button \n              onClick={this.clearTaskboard} \n              className=\"btn__taskList\" \n              disabled={ this.state.taskItems.length ? \"\" : \"disabled\" }\n            >Clear Board</button>\n            </div>\n            <div className=\"taskLists\">\n              { \n                this.state.taskStatus.map((status, idx) => {\n                  const tasks = this.state.taskItems.filter(task => task.status === status);\n                  return (\n                    <TaskList \n                      className=\"taskList\" \n                      key={idx} \n                      status={status}\n                      tasks={tasks} \n                      addTask={this.addTask}\n                      moveTask={this.moveTask}\n                      removeTask={this.removeTask}\n                      editTask={this.updateTask}\n                    >\n                      {statusString[status]}\n                    </TaskList>\n                  )\n                })\n              } \n            </div>\n          </div>\n        </main>\n\n        {/* START of FOOTER */}\n        <footer>\n          <div className=\"wrapper\">\n            <p>Copyright 2020 - Created By <a href=\"https://andrefacey.com\">Andre Facey</a> at <a href=\"https://junocollege.com\">Juno College</a> - Design Inspiration from Scott Sobere-Yu and <a href=\"https://dribbble.com/shots/6250762-Kanban-Board\">Nikita</a></p>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}