{"version":3,"sources":["contexts/ThemeContext.js","firebase.js","contexts/UserContext.js","contexts/TasksContext.js","components/Settings.js","components/Header.js","components/TaskBoardMenu.js","components/TaskForm.js","components/TaskItem.js","components/TaskList.js","components/TaskLists.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","React","createContext","ThemeProvider","children","useState","value","theme","setTheme","Provider","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","UserContext","UserProvider","dbRef","loggedIn","user","setUser","checkForUser","setCheckForUser","useEffect","auth","onAuthStateChanged","uid","signInUser","provider","GoogleAuthProvider","signInWithPopup","then","catch","error","Swal","fire","title","text","icon","confirmButton","logoutUser","signOut","console","log","TasksContext","TasksProvider","loadComplete","setLoadComplete","taskItems","setTaskItems","useContext","listFilter","setListFilter","searchTerms","setSearchTerms","searchItems","setSearchItems","fetchTasks","useCallback","database","ref","on","response","tasksData","val","key","taskItem","task","status","push","retrieveTaskItems","searchString","RegExp","filter","test","items","length","taskStatus","numOfTasks","Settings","props","className","onClick","remove","clearTaskboard","disabled","type","name","id","onChange","defaultChecked","htmlFor","Header","displaySettings","setDisplaySettings","faTimes","faChevronDown","TaskBoardMenu","handleListFilter","evt","target","placeholder","aria-hidden","faSearch","TaskForm","taskValue","setIsStaging","setIsEditing","taskInput","setTaskInput","textInput","document","querySelector","activeElement","autosize","focus","action","onBlur","currentTarget","setTimeout","contains","onMouseDown","child","e","newValue","preventDefault","update","newTask","addTask","TaskItem","isEditing","changeStatus","direction","newIdx","indexOf","moveTask","toggleEdit","faChevronLeft","onFocus","faChevronRight","TaskList","tasks","isStaging","menuEnabled","setMenuEnabled","faBars","open","inProgress","complete","taskListItems","reduce","deleteList","clearTaskList","map","TaskLists","Footer","href","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.daa11fa4.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nexport const ThemeContext = React.createContext()\n\nconst ThemeProvider = ({children}) => {\n  const [ theme, setTheme ] = useState(\"\");\n  const value = {\n    theme,\n    setTheme\n  }\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport default ThemeProvider;","// firebase.js\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/auth';\n\n// *** USE YOUR CONFIG OBJECT ***\n// Initialize Firebase\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCf4r4_JiAWZjMYxHx2oPdOOPBunUeG9zg\",\n  authDomain: \"taskboard-drethedev.firebaseapp.com\",\n  databaseURL: \"https://taskboard-drethedev.firebaseio.com\",\n  projectId: \"taskboard-drethedev\",\n  storageBucket: \"taskboard-drethedev.appspot.com\",\n  messagingSenderId: \"868447749524\",\n  appId: \"1:868447749524:web:bc280f2ee21da6c3fe7b81\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// --------------------------- addTask\nexport const addTask = (dbRef, newTask) => { firebase.database().ref(dbRef).push(newTask); }\n\n// --------------------------- updateTask\nexport const updateTask = (dbRef, key, newValue) => firebase.database().ref(dbRef + key).update({task: newValue});\n\n// --------------------------- removeTask\nexport const removeTask = (dbRef, key) => firebase.database().ref(dbRef).child(key).remove();\n\n\n// --------------------------- moveTask\nexport const moveTask = (dbRef, status) => { firebase.database().ref(dbRef).update({status}) }\n\n// --------------------------- clearTaskList\nexport const clearTaskList = (dbRef, taskListItems) => {\n  // pass an object of keys with null values to clear multiple items\n  firebase.database().ref(dbRef).update(taskListItems);\n}\n\n  // --------------------------- clearTaskboard\nexport const clearTaskboard = (dbRef) => {\n    // remove all items in firebase\n    firebase.database().ref(dbRef).remove();\n  }\n\n\nexport const retrieveTaskItems = (dbRef, setTaskItems) => {\n  // listener for any value change on the db reference\n  firebase.database().ref(dbRef).on('value', response => {\n    const tasksData = response.val();\n    \n    // create empty array to store data retrieved from db later\n    const taskItems = [];\n    for (const key in tasksData) {\n      const taskItem = {\n        key: key,\n        task: tasksData[key].task,\n        status: tasksData[key].status\n      }\n      taskItems.push(taskItem);\n    }\n    \n    // update state with the taskItems retrieved from the database\n    setTaskItems(taskItems)\n  })\n}\n\n\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React, { useState, useEffect } from 'react';\nimport firebase from '../firebase';\nimport Swal from \"sweetalert2\";\nexport const UserContext = React.createContext();\n\nconst UserProvider = ({children}) => {\n  const [ user, setUser ] = useState({dbRef: \"public/\", loggedIn: false});\n  const [ checkForUser, setCheckForUser ] = useState(true); \n\n  // ------- check if there's a logged in user before retrieving any tasks\n  useEffect(function checkForAuthenticatedUser() {\n    // check if there is a current user\n    firebase.auth().onAuthStateChanged((user) => {\n      // if there is a user update state with the dbRef and loggedIn to true\n      if (user) {\n        setUser({dbRef: user.uid + \"/\", loggedIn: true});\n      }\n      // set checkForUser to false\n      setCheckForUser(false)\n    })\n  }, [])\n\n  \n\n  // --------------------------- signInUser (Google Auth)\n  const signInUser = () => {\n    // create new google auth provider\n    const provider = new firebase.auth.GoogleAuthProvider();\n    \n    // initiate sign in with popup using google auth\n    firebase.auth().signInWithPopup(provider)\n      .then(({user}) => {\n        // once user is signed in, set user info and user's dbRef in state\n        \n        setUser({\n          dbRef: user.uid + \"/\",\n          loggedIn: true\n        })\n\n        setCheckForUser(true);\n      })\n      .catch(error => {\n        // if there is an error, display an alert\n        Swal.fire({\n          title: \"Oops!\",\n          text: \"There was an error signing in: \" + error,\n          icon: \"error\",\n          confirmButton: \"OK\"\n        })\n      })\n  }\n\n  // --------------------------- logoutUser\n  const logoutUser = () => {\n    firebase.auth().signOut()\n      .then(() => {\n        // once user is logged out, reset user and dbRef in state\n        setUser({\n          dbRef: \"public/\",\n          loggedIn: false\n        })\n\n        setCheckForUser(true);\n        console.log('user logged out');\n      })\n      .catch(error => {\n        // if there is an error, display an alert\n        Swal.fire({\n          title: \"Oops!\",\n          text: \"There was an error while logging out: \", error,\n          icon: \"error\",\n          confirmButton: \"OK\"\n        })\n      })\n  }\n\n  const value = {\n    user,\n    checkForUser,\n    setUser,\n    signInUser,\n    logoutUser\n  }\n\n  return (\n    <UserContext.Provider value={value}>\n      {children}\n    </UserContext.Provider>\n  )\n}\n\nexport default UserProvider;","import React, { useContext, useState, useEffect, useCallback } from 'react';\nimport { retrieveTaskItems } from '../firebase';\nimport { UserContext } from './UserContext';\n\nexport const TasksContext = React.createContext();\n\nconst TasksProvider = ({children}) => {\n  const [ loadComplete, setLoadComplete ] = useState(false); \n  const [ taskItems, setTaskItems ] = useState([]);\n  const { user: { dbRef }, checkForUser } = useContext(UserContext);\n\n  const [ listFilter, setListFilter ] = useState(\"all\");\n\n  const [ searchTerms, setSearchTerms ] = useState(\"\");\n  const [ searchItems, setSearchItems ] = useState([]);\n\n  const taskStatus = ['open', 'inProgress', 'complete'];\n\n  // --------------------------- retrieveTaskItems\n  const fetchTasks = useCallback(() => retrieveTaskItems(dbRef, setTaskItems), [dbRef])  \n\n  // retreive tasks once userCheck is true\n  useEffect(function fetchTasksAfterUserCheck() {\n    if (!checkForUser) {\n      fetchTasks();\n      setLoadComplete(true);\n    }\n\n  }, [checkForUser, fetchTasks])\n\n\n    // --------------------------- handleSearch\n    const handleSearch = () => {\n      if (searchTerms) {\n        // create regex for search terms - case insensistive\n        const searchString = new RegExp(searchTerms, 'i');\n    \n        // filter out tasks by test against search terms\n        const searchItems = taskItems.filter(({task}) => searchString.test(task));\n    \n        // store filtered results into searchItems state to preserve the state of the taskItems\n        setSearchItems(searchItems);\n      }\n    }\n  // filter tasks from search terms\n  useEffect(handleSearch, [searchTerms, taskItems])\n  \n\n  // if there are search terms, display the filtered searchItems, otherwise show all taskItems\n  const items = !searchTerms.length ? taskItems : searchItems;\n\n  // if a list has been filtered, only display items from that list\n  const lists = listFilter === 'all' ? taskStatus : [listFilter];\n\n  \n  const value = {\n    taskStatus: lists,\n    taskItems: items,\n    numOfTasks: items.length,\n    loadComplete,\n    searchTerms,\n    setSearchItems,\n    setSearchTerms,\n    setListFilter,\n  }\n\n\n  return (\n    <TasksContext.Provider value={value}>\n      {children}\n    </TasksContext.Provider>\n  )\n}\n\nexport default TasksProvider","import React, { useContext } from 'react';\nimport { TasksContext } from '../contexts/TasksContext';\nimport { ThemeContext } from '../contexts/ThemeContext';\nimport { UserContext } from '../contexts/UserContext';\nimport { clearTaskboard } from '../firebase';\n\nconst Settings = props => {\n  // const { numOfTasks, loadComplete } = props;\n  const { theme, setTheme } = useContext(ThemeContext);\n  const { user: { dbRef, loggedIn }, signInUser, logoutUser } = useContext(UserContext);\n  const { taskItems, loadComplete } = useContext(TasksContext);\n\n  const numOfTasks = taskItems ? taskItems.length : 0;\n\n  const toggleTheme = () => {\n    if (theme === \"dark\") {\n      setTheme(\"\")\n    } else {\n      setTheme(\"dark\")\n    }\n  }\n\n  const handleClearTaskboard = () => { clearTaskboard(dbRef); }\n\n  return (\n    <div className=\"settings\">\n      <button onClick={handleClearTaskboard}  className=\"btn btn--black btn__taskBoard btn__taskBoard--clear\" disabled={ numOfTasks ? \"\" : \"disabled\" }>Clear Task Board</button>\n          {\n            // check if app has loaded before display sign in / log out buttons\n            loadComplete \n            ? loggedIn // check if there is a logged in user\n                ? <button  onClick={logoutUser} className=\"btn btn--green btn__taskBoard btn__taskBoard--auth\">Log Out</button>\n                : <button  onClick={signInUser} className=\"btn btn--red btn__taskBoard btn__taskBoard--auth\">Sign In With Google</button>\n            // if app has not loaded do not display sign in / log out buttons\n            : null\n          }\n          <input className=\"themeToggle__checkbox sr-only\" type=\"checkbox\" name=\"themeToggle\" id=\"themeToggle\" onChange={toggleTheme} defaultChecked={theme === \"dark\"}/>\n          <label className=\"themeToggle__label\" htmlFor=\"themeToggle\">{theme === \"dark\" ? \"Light\" : \"Dark\"} Mode <span className=\"themeToggle__toggler\"></span></label>\n    </div>\n  )\n}\n\nexport default Settings;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronDown, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { useState } from 'react';\nimport Settings from './Settings';\n\nconst Header = () => {\n  const [ displaySettings, setDisplaySettings ] = useState(false);\n\n  const openSettings = () => { setDisplaySettings(true);}\n  const closeSettings = () => { setDisplaySettings(false);}\n\n  return (  \n    <header>\n      <div className=\"wrapper displayContainer\">\n        <div className=\"header__text\">\n          <h1>Task Board</h1>\n          <p>Add and track tasks to increase productivity!</p>\n        </div>\n        <div className=\"header__buttons\">\n            <h2 onClick={displaySettings ? closeSettings : openSettings}>\n              <span>Settings </span>\n              <FontAwesomeIcon icon={displaySettings ? faTimes : faChevronDown} />\n            </h2>\n          {\n            displaySettings\n            &&\n            <Settings />\n          }\n          \n        </div>\n      </div>\n    </header>\n  )\n}\n\n\nexport default Header;","import React, { useContext } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { TasksContext } from '../contexts/TasksContext';\n\nconst TaskBoardMenu = () => {\n  const { setListFilter, searchTerms, setSearchTerms, setSearchItems, numOfTasks } = useContext(TasksContext);\n\n  // --------------------------- handleChange\n  const handleSearchInput = (evt) => {\n    // call handleSearch if the input searchTerms input was changed and there are tasks\n    if (numOfTasks) {\n      // set seachTerms state to value, and then call this.handleSearch\n      setSearchTerms(evt.target.value);\n    }\n  }\n\n  const handleListFilter = evt => {\n    setListFilter(evt.target.value)\n  }\n\n  const clearSearch = () => { \n    setSearchTerms(\"\");\n    setSearchItems([]);\n  }\n\n  return(\n    <section className=\"taskBoard__menu\">\n\n      {/* Task List Filter Inputs */}\n      <fieldset className=\"taskBoard__listFilter\">\n        <div className=\"inputContainer__filter\">\n          <legend className=\"srOnly\">Filter the task items by list</legend>\n          <input type=\"radio\" className=\"srOnly taskBoard__filterInput\" name=\"listFilter\" id=\"filterAll\" value=\"all\" onChange={handleListFilter} defaultChecked />\n          <label className=\"btn btn--black\" htmlFor=\"filterAll\">All</label>\n          \n          <input type=\"radio\" className=\"srOnly taskBoard__filterInput\" name=\"listFilter\" id=\"filterOpen\" value=\"open\" onChange={handleListFilter} />\n          <label className=\"btn btn--red\" htmlFor=\"filterOpen\">Open</label>\n          \n          <input type=\"radio\" className=\"srOnly taskBoard__filterInput\" name=\"listFilter\" id=\"filterInProgress\" value=\"inProgress\" onChange={handleListFilter} />\n          <label className=\"btn btn--blue\" htmlFor=\"filterInProgress\">In Progress</label>\n          \n          <input type=\"radio\" className=\"srOnly taskBoard__filterInput\" name=\"listFilter\" id=\"filterComplete\" value=\"complete\" onChange={handleListFilter} />\n          <label className=\"btn btn--green\" htmlFor=\"filterComplete\">Complete</label>\n        </div>\n      </fieldset>\n\n      {/* Task List Search Bar */}\n      <div className=\"inputContainer__searchBar\">\n        <label htmlFor=\"searchTerms\" className=\"srOnly\">Search for task items</label>\n        <input className=\"taskBoard__searchBar\" type=\"text\" name=\"searchTerms\" id=\"searchTerms\" placeholder=\"search\" onChange={handleSearchInput} value={searchTerms} />\n        {\n          // Check if the user has started a search\n          searchTerms ?\n          // Display button to clear the search terms\n          <>\n            <label htmlFor=\"searchBarBtn\" className=\"srOnly\">Button to clear the search terms</label>\n            <button id=\"searchBarBtn\" className=\"taskBoard__searchBarBtn\" onClick={clearSearch}>\n              <FontAwesomeIcon className=\"taskBoard__searchBarIcon--clear\" icon={faTimes} aria-hidden=\"true\"/>\n            </button>\n          </>\n          :\n          // Display search icon to visually indicate that tasks can be searched for\n          <FontAwesomeIcon className=\"taskBoard__searchBarIcon\" icon={faSearch} aria-hidden=\"true\"/>\n        }\n      </div>\n\n    </section>\n  )\n}\n\nexport default TaskBoardMenu;","import React, { useContext, useState, useEffect } from 'react';\nimport autosize from 'autosize';\nimport {UserContext} from './../contexts/UserContext';\nimport { addTask, removeTask, updateTask } from './../firebase';\n\nconst TaskForm = props => {\n  const { id, type, taskValue, setIsStaging, setIsEditing } = props;\n  // const { id, type, handleSubmit, handleBlur, handleChange, handleClear, taskValue, removeTask } = props;\n  const {user} = useContext(UserContext);\n  const [ taskInput, setTaskInput ] = useState(taskValue || \"\")\n\n    // --------------------------- useEffect\n    useEffect(() => {\n      const textInput = document.querySelector(`#taskFormInput_${id}`);\n  \n      // only go to the end of the text if the input is not already focused\n      if (textInput && textInput !== document.activeElement) {\n        // autosize the textarea height as needed\n        autosize(textInput);\n  \n        // set the cursor to the end of the text input by setting value to \"\" > focus > value back to state.stagingTask\n        textInput.value = \"\";\n        // focus on the input\n        textInput.focus();\n        // set the input value\n        textInput.value = taskInput;\n      }\n    })\n\n  const handleBlur = (evt) => {\n    // implementation from https://gist.github.com/pstoica/4323d3e6e37e8a23dd59\n    const currentTarget = evt.currentTarget;\n    \n    // Check the newly focused element in the next tick of the event loop\n    setTimeout(() => {\n      // Check if the new activeElement is a child of the original container\n      if (!currentTarget.contains(document.activeElement)) {\n        // if new focused element is not contained in the form ... toggle out of staging a task\n        type === \"edit\" ? setIsEditing(false) : setIsStaging(false);\n      }\n    }, 100);\n  }\n\n  const handleTaskInputChange = (evt) => {\n    setTaskInput(evt.target.value);\n  }\n\n  const handleClear = () => setTaskInput(\"\");\n\n  const handleAddTask = (e) => { \n    e.preventDefault();\n\n    const newTask = {\n      task: taskInput,\n      status: id\n    }\n    addTask(user.dbRef, newTask); \n    setIsStaging(false);\n  }\n\n  const handleRemoveTask = () => { removeTask(user.dbRef, id); }\n  \n  const handleUpdateTask = (e) => { \n    e.preventDefault();\n    updateTask(user.dbRef, id, taskInput); \n    setIsEditing(false);\n  }\n\n  return (\n    <>\n      <h3 className=\"taskForm__heading\">{type === 'edit' ? 'Edit Task' : 'New Task'}</h3>\n      <form action=\"#\" onBlur={handleBlur} className=\"taskForm\">\n        <label htmlFor={`taskFormInput_${id}`} className=\"srOnly\">Task Item</label>\n        <textarea className=\"taskForm__input\" id={`taskFormInput_${id}`} name=\"taskFormInput\" onChange={handleTaskInputChange} value={taskInput}></textarea>\n        \n        {\n        // if there is input, display button to clear the text\n        taskInput &&\n          <>\n            <label htmlFor={`taskBtn__clear--${id}`} className=\"srOnly\">Clear task input</label>\n            <button id={`taskBtn__clear--${id}`} type=\"button\" onMouseDown={handleClear} className=\"btn btn--black\">Clear</button>\n          </>  \n        }\n        \n        {\n        // if in editing mode, display button to delete the task\n        type === \"edit\" \n        &&\n          <>\n            <label htmlFor={`taskBtn__delete--${id}`} className=\"srOnly\">Delete task</label>\n            <button id={`taskBtn__delete--${id}`} type=\"button\" onMouseDown={handleRemoveTask} className=\"btn btn--red\">Delete</button>\n          </>\n        }\n        \n        {/* Save task button */}\n        <label htmlFor={`taskBtn__save--${id}`} className=\"srOnly\">Save task input</label>\n        <button type=\"button\" id={`taskBtn__save--${id}`} className=\"btn btn--green\" onMouseDown={type === 'edit' ? handleUpdateTask : handleAddTask} disabled={taskInput ? \"\" : \"disabled\"}>{type === 'edit' ? 'Save' : 'Add'}</button>\n        \n      </form>  \n    </>\n  );\n}\n\nexport default TaskForm;","import React, { useContext, useState } from 'react';\nimport TaskForm from './TaskForm.js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons';\nimport { UserContext } from '../contexts/UserContext.js';\nimport { moveTask } from '../firebase';\nimport { TasksContext } from '../contexts/TasksContext.js';\n\nconst TaskItem = ({id, task, status}) => {\n  const [ isEditing, setIsEditing ] = useState(false);\n  const { user: { dbRef } } = useContext(UserContext);\n  const { taskStatus } = useContext(TasksContext);\n\n  const changeStatus = (direction) => {\n    // find current status index\n    const currentIdx = taskStatus.indexOf(status);\n  \n    // store new index as the value of currentIdx + the direction (1 or - 1)\n    let newIdx = currentIdx + direction;\n\n    // prevent out of range indexes of the taskStatus array\n    // if newIdx < 0 - set to 0, if newIdx gte taskStatus length - set to last item in array, otherwise keep the value\n    newIdx = newIdx < 0 ? 0 : newIdx >= taskStatus.length ? taskStatus.length - 1 : newIdx;\n\n    if (status !== taskStatus[newIdx]) {\n      moveTask(dbRef + id, taskStatus[newIdx]);\n    }\n\n  }\n  // --------------------------- handleMovePrev\n  const handleMovePrev = () => { changeStatus(-1); }\n\n  // --------------------------- handleMoveNext\n  const handleMoveNext = () => { changeStatus(1); }  \n\n  // --------------------------- toggleEdit\n  // check if taskFormInput has a value (not cleared by user)\n  const toggleEdit = () => { setIsEditing(!isEditing); } \n\n  // --------------------------- return\n    return(\n      <li className={`taskItem taskItem--${status}`} >\n      \n      {\n        // If status is 'open' DO NOT render the \"previous\" status button\n        status !== 'open' \n        &&\n        <>\n          <label htmlFor={`btnPrev--${id}`} className=\"srOnly\">Move task to the previous status</label>\n          <button id={`btnPrev--${id}`} className=\"taskItem__btn taskItem__btn--prev\" onClick={handleMovePrev}>\n            <FontAwesomeIcon icon={faChevronLeft} aria-hidden=\"true\" />\n            <span className=\"srOnly\">Move task to the previous status</span>\n          </button>\n        </>\n      }\n    \n    { \n      // if not in editing mode render the task as text ... otherwise render the task form to edit the task\n      !isEditing \n        ? <>\n            <label htmlFor={`taskItem--${id}`} className=\"srOnly\">Click or focus on the text of the task to enter edit mode and modify or delete the task</label>\n            <button id={`taskItem--${id}`} className=\"taskItem__text\" onClick={toggleEdit} onFocus={toggleEdit}>{task}</button> \n          </>\n        : <TaskForm \n            id={id}\n            type=\"edit\"\n            taskValue={task}\n            setIsEditing={setIsEditing}\n          />\n    }\n      \n    {\n      // If status is 'complete' DO NOT render the \"next\" status button\n      status !== \"complete\" \n      &&\n      <>\n        <label htmlFor={`btnNext--${id}`} className=\"srOnly\">Move task to the previous status</label>\n        <button id={`btnNext--${id}`} className=\"taskItem__btn taskItem__btn--next\" onClick={handleMoveNext}>\n          <FontAwesomeIcon icon={faChevronRight} aria-hidden=\"true\"/>\n          <span className=\"srOnly\">Click to move task to the next status</span>\n        </button>\n      </>\n    }\n    </li>\n    ) \n  // }\n  }\n\nexport default TaskItem;","import React, { useContext, useState } from 'react';\nimport TaskItem from './TaskItem';\nimport TaskForm from './TaskForm';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport {clearTaskList} from '../firebase.js';\nimport { UserContext } from '../contexts/UserContext';\n\nconst TaskList = ({ status, tasks, moveTask }) => {\n  const [ isStaging, setIsStaging ] = useState(false);\n  const [ menuEnabled, setMenuEnabled ] = useState(false);\n\n  const { user } = useContext(UserContext);\n\n  // heading text for task status lists\n  const statusString = {\n    open: \"Todo\",\n    inProgress: \"In Progress\",\n    complete: \"Completed\"\n  }\n  \n\n  // --------------------------- toggleMenuEnabled\n  const toggleMenuEnabled = () => setMenuEnabled(!menuEnabled);\n\n  const toggleTaskStaging = () => setIsStaging(!isStaging);\n\n\n  // --------------------------- handleClearList\n  const handleClearList = () => {\n    // if task lst has items\n    if (tasks.length) {\n\n      // filter out the full task items list to those with the status of the task list\n      const taskListItems = \n      tasks\n        .filter(task => task.status === status)\n        // create an object with the keys of the task list items with a null value\n        .reduce(((deleteList, taskItem) => { \n          deleteList[taskItem.key] = null;\n          return deleteList;\n        }), {});\n      // remove the filtered items from firebase\n      clearTaskList(user.dbRef, taskListItems)  \n    }\n    // toggle tasklist menu to false\n    setMenuEnabled(false);\n  }\n  \n  // --------------------------- return\n\n  return(\n    <div className=\"taskList\">\n      <div className={`taskList__header taskList__header--${status}`}>\n        <label htmlFor={`taskListMenuBtn--${status}`} className=\"srOnly\">Click the button to toggle the task list menu to clear the task list's items</label>\n        <button \n          id={`taskListMenuBtn--${status}`} className={menuEnabled ? \"btn taskList__menuBtn taskList__menuBtn--active\" : \"btn taskList__menuBtn\" } \n          onClick={toggleMenuEnabled}>\n            <span className=\"srOnly\">Toggle the task list's menu</span>\n          {!menuEnabled ? <FontAwesomeIcon icon={faBars} /> : <FontAwesomeIcon icon={faTimes} /> }  \n        </button>\n        \n        <h2 className=\"taskList__headingText\">\n          {/* Task List Name */}\n          {statusString[status]} \n          {/* Task List Item Counter */}\n          {tasks.length > 0 && <span className=\"taskList__count\">{tasks.length}</span>}\n        </h2>\n\n        {\n          // Toggle task list header icon depending if the menuEnabled is true\n          !menuEnabled \n          ? \n          <>\n            <label htmlFor={`taskListAddBtn--${status}`} className=\"srOnly\">Click the button to toggle the add new task form</label>\n            <button id={`taskListAddBtn--${status}`} onClick={toggleTaskStaging} className={`btn taskList__addBtn`} disabled={isStaging ? 'disabled' : ''}>Add Task</button>\n          </>\n          : \n          <>\n            <label htmlFor={`taskListClearBtn--${status}`} className=\"srOnly\">Click the button to clear the task list's items</label>\n            <button id={`taskListClearBtn--${status}`} onClick={handleClearList} className={`btn btn--black taskList__clearBtn`} disabled={tasks.length ? '' : 'disabled' }>Clear List</button>\n          </>\n        }\n        \n        \n      </div>\n      <ul className=\"taskList__list\">\n        { \n        // render a TaskForm to add a new task for the task list\n          isStaging && \n          <li className={`taskItem taskItem--${status}`}>\n            <TaskForm \n              id={status}\n              setIsStaging={setIsStaging}\n            />\n          </li>\n        }\n        { \n        // render the taskform items for the list\n          tasks.map(({key, task, status}) => (\n            <TaskItem \n              key={key} \n              id={key} \n              task={task} \n              status={status} \n              moveTask={moveTask} \n            />)\n          )\n        }\n      </ul>\n    </div>\n  )\n\n}\nexport default TaskList;","import React, { useContext } from 'react';\nimport { TasksContext } from '../contexts/TasksContext';\nimport TaskList from './TaskList';\n\nconst TaskLists = () => {\n  const { taskItems, taskStatus } = useContext(TasksContext);\n\n  return (\n    <section className=\"taskLists\">\n      { \n        taskStatus.map((status) => {\n          const tasks = taskItems.filter(task => task.status === status);\n          return (\n            <TaskList \n              className=\"taskList\" \n              key={status} \n              status={status}\n              tasks={tasks} \n            />\n          )\n        })\n      } \n    </section>\n  )\n\n\n}\n\nexport default TaskLists;","import React from 'react'\n\nconst Footer = () => (\n  <footer>\n    <div className=\"wrapper displayContainer\">\n      <p>Copyright 2020</p> \n      <p>Created By <a href=\"https://andrefacey.com\">Andre Facey</a> at <a href=\"https://junocollege.com\" target=\"_blank\" rel=\"noopener noreferrer\">Juno College</a></p>\n      <p>Design Inspiration from <a href=\"https://scottrs.ca\" target=\"_blank\" rel=\"noopener noreferrer\">Scott Sobere-Yu</a> and <a href=\"https://dribbble.com/shots/6250762-Kanban-Board\" target=\"_blank\" rel=\"noopener noreferrer\">Nikita</a></p>\n    </div>\n  </footer>\n);\n\nexport default Footer;","import React, { useContext } from 'react';\nimport { ThemeContext } from './contexts/ThemeContext.js';\nimport Header from './components/Header.js';\nimport TaskBoardMenu from './components/TaskBoardMenu.js';\nimport TaskLists from './components/TaskLists.js';\nimport Footer from './components/Footer.js';\nimport './App.css';\n\nconst App = () => {\n  const { theme } = useContext(ThemeContext);\n\n  return (\n  <div className={`pageContainer ${theme}`}>\n    {/* START of HEADER */}\n    <Header />\n    \n    {/* START of MAIN */}\n    <main>\n      <div className=\"wrapper\">\n        <TaskBoardMenu />\n        <TaskLists />\n      </div>\n    </main>\n\n    {/* START of FOOTER */}\n    <Footer />\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport UserContext from './contexts/UserContext';\nimport ThemeContext from './contexts/ThemeContext';\nimport TasksContext from './contexts/TasksContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <UserContext>\n      <ThemeContext>\n        <TasksContext>\n          <App />\n        </TasksContext>\n      </ThemeContext>\n    </UserContext>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}