{"version":3,"sources":["firebase.js","TaskForm.js","TaskItem.js","TaskList.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","TaskForm","props","id","type","handleSubmit","handleBlur","handleChange","addTask","taskValue","removeTask","toggleForm","action","onSubmit","onBlur","className","name","onChange","value","onClick","TaskItem","evt","currentTarget","setTimeout","contains","document","activeElement","setState","isEditing","target","handleEditSubmit","preventDefault","editTask","state","taskEdit","handleMovePrev","moveTask","status","handleMoveNext","toggleEdit","task","input","querySelector","this","autosize","focus","icon","faChevronLeft","aria-hidden","onFocus","tabIndex","faChevronRight","Component","TaskList","toggleTaskStaging","isStaging","handleStagingTask","e","stagingTask","handleAddTask","tasks","children","length","faEllipsisV","map","key","App","clearTaskboard","newTask","database","ref","remove","push","updateTask","newValue","update","child","direction","dbRef","taskStatus","currentIdx","indexOf","newIdx","taskItems","on","response","tasksData","val","taskItem","statusString","open","inProgress","complete","disabled","idx","filter","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8205bba0.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// *** USE YOUR CONFIG OBJECT ***\n// Initialize Firebase\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDBqq9f4CwQkWmvi0jA9or1uqWUTx73r_E\",\n  authDomain: \"andre-facey-project-five.firebaseapp.com\",\n  databaseURL: \"https://andre-facey-project-five.firebaseio.com\",\n  projectId: \"andre-facey-project-five\",\n  storageBucket: \"andre-facey-project-five.appspot.com\",\n  messagingSenderId: \"940406876843\",\n  appId: \"1:940406876843:web:d25925e9d0cc096f1b65ee\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React from 'react';\n\nconst TaskForm = props => {\n  const { id, type, handleSubmit, handleBlur, handleChange, addTask, taskValue, removeTask, toggleForm } = props;\n\n  return (\n    <form action=\"#\" onSubmit={handleSubmit} onBlur={handleBlur} className=\"clearfix\">\n      {/* TODO remove autocomplete for submission */}\n      <textarea className=\"taskItem__editInput\" id={`taskEdit_${id}`} name=\"taskEdit\" onChange={handleChange} value={taskValue}>\n      </textarea>\n      {type === \"edit\" && <button type=\"button\" onClick={removeTask} className=\"btn__task btn__task--delete\">Delete</button>}\n      <button type=\"button\" onClick={toggleForm} className=\"btn__task btn__task--edit\">Cancel</button>\n      <button className=\"btn__task btn__task--save\">Save</button>\n      {type === \"add\" && <button type=\"button\" onClick={addTask} className=\"btn__task btn__task--add\">Add</button>}\n    </form>  \n  );\n}\n\nexport default TaskForm;","import React, { Component} from 'react';\nimport TaskForm from './TaskForm.js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons';\nimport autosize from 'autosize';\n\nclass TaskItem extends Component {\n  constructor(props) {\n    super()\n\n    this.state = {\n      taskEdit: props.task,\n      isEditing: false,\n    }\n  }\n\n  componentDidUpdate() {\n    const input = document.querySelector(`#taskEdit_${this.props.id}`);\n    if (input) {\n      autosize(input);\n      input.focus();\n    } \n\n  }\n\n  handleBlur = (evt) => {\n    // implementation from https://gist.github.com/pstoica/4323d3e6e37e8a23dd59\n    const currentTarget = evt.currentTarget;\n\n    // Check the newly focused element in the next tick of the event loop\n    setTimeout(() => {\n      // Check if the new activeElement is a child of the original container\n      if (!currentTarget.contains(document.activeElement)) {\n        // You can invoke a callback or add custom logic here\n        this.setState({isEditing: false});\n      }\n    }, 0);\n  }\n\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    })\n  }\n\n  handleEditSubmit = (evt) => {\n    evt.preventDefault();\n    this.props.editTask(this.props.id, this.state.taskEdit);\n    this.setState({isEditing: false});\n  }\n\n  handleMovePrev = () => this.props.moveTask(this.props.id, this.props.status, -1);\n  handleMoveNext = () => this.props.moveTask(this.props.id, this.props.status, 1);\n\n  removeTask = () => this.props.removeTask(this.props.id);\n  \n  toggleEdit = () => this.setState({ isEditing: !this.state.isEditing });\n\n  render() {\n\n    const { id, task, status } = this.props;\n  \n    return(\n      <li className={`taskItem taskItem--${status}`} >\n      \n      {\n        status !== 'open' &&\n        <button className=\"btn__task btn__task--prev\" onClick={this.handleMovePrev}>\n          <FontAwesomeIcon icon={faChevronLeft} aria-hidden=\"true\" />\n          <span className=\"sr-only\">Click to move task to the next status</span>\n        </button>\n      }\n    \n    { \n      !this.state.isEditing \n        ? <p className=\"taskItem__text\" onClick={this.toggleEdit} onFocus={this.toggleEdit} tabIndex=\"0\">{task}</p> \n        : <TaskForm \n            id={id}\n            type=\"edit\"\n            handleSubmit={this.handleEditSubmit} \n            handleBlur={this.handleBlur} \n            handleChange={this.handleChange}\n            taskValue={this.state.taskEdit}\n            removeTask={this.removeTask}\n            toggleForm={this.toggleEdit}\n          />\n    }\n      \n    {\n      status !== \"complete\" &&\n        <button className=\"btn__task btn__task--next\" onClick={this.handleMoveNext}>\n          <FontAwesomeIcon icon={faChevronRight} aria-hidden=\"true\"/>\n          <span className=\"sr-only\">Click to move task to the next status</span>\n        </button>\n    }\n    </li>\n    ) \n  }\n}\n\nexport default TaskItem;","import React, { Component } from 'react';\nimport TaskItem from './TaskItem';\nimport TaskForm from './TaskForm';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEllipsisV } from '@fortawesome/free-solid-svg-icons';\n\nclass TaskList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isStaging: false,\n      stagingTask: \"\",\n    }\n  }\n\n  toggleTaskStaging = () => {\n    this.setState({isStaging: !this.state.isStaging});\n\n    // if (this.state.isStaging) {\n    //   const task = document.querySelector('#task');\n    //   task.focus();\n    // }\n  }\n\n  handleStagingTask = (e) => {\n    this.setState({stagingTask: e.target.value})\n  }\n\n  handleAddTask = (e) => {\n    e.preventDefault();\n\n    if (this.state.stagingTask) {\n      this.props.addTask({\n        task: this.state.stagingTask,\n        status: this.props.status\n      })\n\n      this.setState({isStaging: false, stagingTask: \"\"});\n    }\n    \n  }\n  \n  render() {\n    const { status, tasks, children, editTask, removeTask, moveTask } = this.props;\n  \n    return(\n      <div className=\"taskList\">\n        <h2 className={`taskList__heading taskList__heading--${status} clearfix`}>\n          {children} \n          {tasks.length > 0 && <span className=\"taskList__count\">{tasks.length}</span>}\n          <button onClick={this.toggleTaskStaging} className={`btn__taskList btn__taskList--add`}>+ Task</button>\n          <button className=\"btn__taskList btn__taskList--menu\"><FontAwesomeIcon icon={faEllipsisV} /></button>\n        </h2>\n        <ul className=\"taskList__list\">\n          { \n            this.state.isStaging && \n            <li className={`taskItem taskItem--${status}`}>\n              <h3>New Task</h3>\n              <TaskForm \n                taskValue={this.state.stagingTask}\n                handleSubmit={this.handleAddTask}\n                toggleForm={this.toggleTaskStaging}\n                onBlur={this.toggleTaskStaging}\n                handleChange={this.handleStagingTask}\n\n              />\n            </li>\n          }\n          { \n            this.props.tasks.map(({key, task, status}) => (\n              <TaskItem \n                key={key} \n                id={key} \n                task={task} \n                status={status} \n                editTask={editTask}\n                removeTask={removeTask} \n                moveTask={moveTask} />)\n            )\n          }\n        </ul>\n      </div>\n    )\n\n  }\n\n}\nexport default TaskList;","import React, { Component } from 'react';\nimport firebase from './firebase.js'\nimport TaskList from './TaskList.js'\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n      taskStatus: ['open', 'inProgress', 'complete'],\n      taskItems: [],\n    }\n  }\n\n  // --------------------------- componentDidMount\n  componentDidMount() {\n    // db reference of \"tasks\"\n    const dbRef = firebase.database().ref(\"tasks\");\n\n    // listener for any value change on the db reference\n    dbRef.on('value', response => {\n      const tasksData = response.val();\n      \n      // create empty array to store data retrieved from db later\n      const taskItems = [];\n      for (const key in tasksData) {\n        const taskItem = {\n          key: key,\n          task: tasksData[key].task,\n          status: tasksData[key].status\n        }\n        taskItems.push(taskItem);\n      }\n      \n      // update state with the taskItems retrieved from the database\n      this.setState({taskItems});\n    });\n  }\n  // --------------------------- clearTaskboard\n  clearTaskboard = (newTask) => firebase.database().ref(\"tasks\").remove();\n\n  // --------------------------- addTask\n  addTask = (newTask) => firebase.database().ref(\"tasks\").push(newTask);\n  \n  // --------------------------- updateTask\n  updateTask = (key, newValue) => firebase.database().ref('tasks/' + key).update({task: newValue});\n\n  // --------------------------- removeTask\n  removeTask = (key) => firebase.database().ref('tasks').child(key).remove();\n\n  // --------------------------- moveTask\n  moveTask = (key, status, direction) => {\n    const dbRef = firebase.database().ref('tasks/' + key);\n    const { taskStatus } = this.state;\n\n    // find current status index\n    const currentIdx = taskStatus.indexOf(status);\n\n    // store new index as the value of currentIdx + the direction (1 or - 1)\n    let newIdx = currentIdx + direction;\n\n    // prevent out of range indexes of the taskStatus array\n    // if newIdx < 0 - set to 0, if newIdx gte taskStatus length - set to last item in array, otherwise keep the value\n    newIdx = newIdx < 0 ? 0 : newIdx >= taskStatus.length ? taskStatus.length - 1 : newIdx;\n\n    // if task has a new position update it in the database\n    newIdx !== currentIdx && dbRef.update({status: taskStatus[newIdx]});\n  }\n\n  // --------------------------- render\n  render() {\n    // heading text for task status lists\n    const statusString = {\n      open: \"Open\",\n      inProgress: \"In Progress\",\n      complete: \"Completed\"\n    }\n\n    return (\n      <div className=\"App\">\n        {/* START of HEADER */}\n        <header className=\"App-header\">\n          {/* TODO flex-container still needed? */}\n          <div className=\"wrapper flex-container\">\n            <h1>Task Board</h1>\n          </div>\n        </header>\n        \n        {/* START of MAIN */}\n        <main className=\"App-main\">\n          <div className=\"wrapper\">\n            <div className=\"taskBoard__menu\">\n\n            <button \n              onClick={this.clearTaskboard} \n              className=\"btn__taskList btn__taskList--clear\" \n              disabled={ this.state.taskItems.length ? \"\" : \"disabled\" }\n            >Clear Board</button>\n            </div>\n            <div className=\"taskLists\">\n              { \n                this.state.taskStatus.map((status, idx) => {\n                  const tasks = this.state.taskItems.filter(task => task.status === status);\n                  return (\n                    <TaskList \n                      className=\"taskList\" \n                      key={idx} \n                      status={status}\n                      tasks={tasks} \n                      addTask={this.addTask}\n                      moveTask={this.moveTask}\n                      removeTask={this.removeTask}\n                      editTask={this.updateTask}\n                    >\n                      {statusString[status]}\n                    </TaskList>\n                  )\n                })\n              } \n            </div>\n          </div>\n        </main>\n\n        {/* START of FOOTER */}\n        <footer>\n          <div className=\"wrapper\">\n            <p>Copyright 2020 - Created By <a href=\"https://andrefacey.com\">Andre Facey</a> at <a href=\"https://junocollege.com\">Juno College</a> - Design Inspiration from Scott Sobere-Yu and <a href=\"https://dribbble.com/shots/6250762-Kanban-Board\">Nikita</a></p>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}