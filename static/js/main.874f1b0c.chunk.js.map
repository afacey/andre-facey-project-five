{"version":3,"sources":["firebase.js","components/Header.js","components/TaskBoardMenu.js","components/TaskForm.js","components/TaskItem.js","components/TaskList.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","props","clearTaskboard","numOfTasks","user","signInUser","logoutUser","loadComplete","className","onClick","disabled","TaskBoardMenu","searchTerms","handleChange","clearSearch","type","name","id","value","onChange","defaultChecked","htmlFor","placeholder","icon","faTimes","aria-hidden","faSearch","TaskForm","handleSubmit","handleBlur","handleClear","taskValue","removeTask","action","onSubmit","onBlur","TaskItem","evt","currentTarget","setTimeout","contains","document","activeElement","setState","isEditing","target","handleEditSubmit","preventDefault","state","taskFormInput","length","editTask","handleMovePrev","moveTask","status","handleMoveNext","toggleEdit","task","clearTask","taskInput","querySelector","this","autosize","focus","faChevronLeft","toggleForm","onFocus","faChevronRight","Component","TaskList","toggleMenuEnabled","menuEnabled","isStaging","handleStagingTask","e","stagingTask","toggleTaskStaging","handleAddTask","addTask","handleClearList","tasks","clearTaskList","filter","reduce","deleteList","taskItem","key","clearStagingTask","faBars","open","inProgress","complete","map","Footer","href","rel","App","provider","auth","GoogleAuthProvider","signInWithPopup","then","uid","dbRef","catch","error","Swal","fire","title","text","confirmButton","signOut","retrieveTaskItems","database","ref","on","response","tasksData","val","taskItems","push","remove","searchItems","taskListItems","update","filterSearchItems","item","newTask","updateTask","newValue","child","direction","taskStatus","currentIdx","indexOf","newIdx","handleSearch","searchString","RegExp","test","listFilter","onAuthStateChanged","items","lists","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.874f1b0c.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/auth';\n\n// *** USE YOUR CONFIG OBJECT ***\n// Initialize Firebase\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCf4r4_JiAWZjMYxHx2oPdOOPBunUeG9zg\",\n  authDomain: \"taskboard-drethedev.firebaseapp.com\",\n  databaseURL: \"https://taskboard-drethedev.firebaseio.com\",\n  projectId: \"taskboard-drethedev\",\n  storageBucket: \"taskboard-drethedev.appspot.com\",\n  messagingSenderId: \"868447749524\",\n  appId: \"1:868447749524:web:bc280f2ee21da6c3fe7b81\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React from 'react';\n\nconst Header = (props) => {\n  const {clearTaskboard, numOfTasks, user, signInUser, logoutUser, loadComplete} = props;\n\n  return (  \n    <header>\n      <div className=\"wrapper displayContainer\">\n        <div className=\"header__text\">\n          <h1>Task Board</h1>\n          <p>Add and track tasks to increase productivity!</p>\n        </div>\n        <div className=\"header__buttons\">\n          <button onClick={clearTaskboard}  className=\"btn btn--black btn__taskBoard btn__taskBoard--clear\" disabled={ numOfTasks ? \"\" : \"disabled\" }>Clear Task Board</button>\n          {\n            // check if app has loaded before display sign in / log out buttons\n            loadComplete \n            ? user // check if there is a logged in user\n                ? <button  onClick={logoutUser} className=\"btn btn--green btn__taskBoard btn__taskBoard--auth\">Log Out</button>\n                : <button  onClick={signInUser} className=\"btn btn--red btn__taskBoard btn__taskBoard--auth\">Sign In With Google</button>\n            // if app has not loaded do not display sign in / log out buttons\n            : null\n          }\n        </div>\n      </div>\n    </header>\n  )\n}\n\n\nexport default Header;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faTimes } from '@fortawesome/free-solid-svg-icons';\n\nconst TaskBoardMenu = props => {\n  const { searchTerms, handleChange, clearSearch } = props;\n\n  return(\n    <section className=\"taskBoard__menu\">\n\n      {/* Task List Filter Inputs */}\n      <fieldset className=\"taskBoard__listFilter\">\n        <div className=\"inputContainer__filter\">\n          <legend className=\"srOnly\">Filter the task items by list</legend>\n          <input type=\"radio\" className=\"srOnly taskBoard__filterInput\" name=\"listFilter\" id=\"filterAll\" value=\"all\" onChange={handleChange} defaultChecked />\n          <label className=\"btn btn--black\" htmlFor=\"filterAll\">All</label>\n          \n          <input type=\"radio\" className=\"srOnly taskBoard__filterInput\" name=\"listFilter\" id=\"filterOpen\" value=\"open\" onChange={handleChange} />\n          <label className=\"btn btn--red\" htmlFor=\"filterOpen\">Open</label>\n          \n          <input type=\"radio\" className=\"srOnly taskBoard__filterInput\" name=\"listFilter\" id=\"filterInProgress\" value=\"inProgress\" onChange={handleChange} />\n          <label className=\"btn btn--blue\" htmlFor=\"filterInProgress\">In Progress</label>\n          \n          <input type=\"radio\" className=\"srOnly taskBoard__filterInput\" name=\"listFilter\" id=\"filterComplete\" value=\"complete\" onChange={handleChange} />\n          <label className=\"btn btn--green\" htmlFor=\"filterComplete\">Complete</label>\n        </div>\n      </fieldset>\n\n      {/* Task List Search Bar */}\n      <div className=\"inputContainer__searchBar\">\n        <label htmlFor=\"searchTerms\" className=\"srOnly\">Search for task items</label>\n        <input className=\"taskBoard__searchBar\" type=\"text\" name=\"searchTerms\" id=\"searchTerms\" placeholder=\"search\" onChange={handleChange} value={searchTerms} />\n        {\n          // Check if the user has started a search\n          searchTerms ?\n          // Display button to clear the search terms\n          <>\n            <label htmlFor=\"searchBarBtn\" className=\"srOnly\">Button to clear the search terms</label>\n            <button id=\"searchBarBtn\" className=\"taskBoard__searchBarBtn\" onClick={clearSearch}>\n              <FontAwesomeIcon className=\"taskBoard__searchBarIcon--clear\" icon={faTimes} aria-hidden=\"true\"/>\n            </button>\n          </>\n          :\n          // Display search icon to visually indicate that tasks can be searched for\n          <FontAwesomeIcon className=\"taskBoard__searchBarIcon\" icon={faSearch} aria-hidden=\"true\"/>\n        }\n      </div>\n\n    </section>\n  )\n}\n\nexport default TaskBoardMenu;","import React from 'react';\n\nconst TaskForm = props => {\n  const { id, type, handleSubmit, handleBlur, handleChange, handleClear, taskValue, removeTask } = props;\n\n  return (\n    <>\n      <h3 className=\"taskForm__heading\">{type === 'edit' ? 'Edit Task' : 'New Task'}</h3>\n      <form action=\"#\" onSubmit={handleSubmit} onBlur={handleBlur} className=\"taskForm\">\n        <label htmlFor={`taskFormInput_${id}`} className=\"srOnly\">Task Item</label>\n        <textarea className=\"taskForm__input\" id={`taskFormInput_${id}`} name=\"taskFormInput\" onChange={handleChange} value={taskValue}></textarea>\n        \n        {\n        // if there is input, display button to clear the text\n        taskValue &&\n          <>\n            <label htmlFor={`taskBtn__clear--${id}`} className=\"srOnly\">Clear task input</label>\n            <button id={`taskBtn__clear--${id}`} type=\"button\" onClick={handleClear} className=\"btn btn--black\">Clear</button>\n          </>  \n        }\n        \n        {\n        // if in editing mode, display button to delete the task\n        type === \"edit\" && \n          <>\n            <label htmlFor={`taskBtn__delete--${id}`} className=\"srOnly\">Delete task</label>\n            <button id={`taskBtn__delete--${id}`} type=\"button\" onClick={removeTask} className=\"btn btn--red\">Delete</button>\n          </>\n        }\n        \n        {/* Save task button */}\n        <label htmlFor={`taskBtn__save--${id}`} className=\"srOnly\">Save task input</label>\n        <button id={`taskBtn__save--${id}`} className=\"btn btn--green\" disabled={taskValue ? \"\" : \"disabled\"}>Save</button>\n      </form>  \n    </>\n  );\n}\n\nexport default TaskForm;","import React, { Component} from 'react';\nimport TaskForm from './TaskForm.js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons';\nimport autosize from 'autosize';\n\nclass TaskItem extends Component {\n  constructor(props) {\n    super()\n\n    this.state = {\n      taskFormInput: props.task,\n      isEditing: false,\n    }\n  }\n  \n  // --------------------------- componentDidUpdate\n  componentDidUpdate() {\n    const taskInput = document.querySelector(`#taskFormInput_${this.props.id}`);\n\n    // only go to the end of the text if the input is not already focused\n    if (taskInput && taskInput !== document.activeElement) {\n      // autosize the textarea height as needed\n      autosize(taskInput);\n\n      // set the cursor to the end of the text input by setting value to \"\" > focus > value back to state.taskFormInput\n      taskInput.value = \"\";\n      // focus on the input\n      taskInput.focus();\n      // set the input value\n      taskInput.value = this.state.taskFormInput;\n    } \n\n  }\n\n  // --------------------------- handleBlur\n  handleBlur = (evt) => {\n    // implementation from https://gist.github.com/pstoica/4323d3e6e37e8a23dd59\n    const currentTarget = evt.currentTarget;\n\n    // Check the newly focused element in the next tick of the event loop\n    setTimeout(() => {\n      // Check if the new activeElement is a child of the original container\n      if (!currentTarget.contains(document.activeElement)) {\n        // if new focused element is not contained in the form ... toggle out of editing the task\n        this.setState({isEditing: false});\n      }\n    }, 0);\n  }\n\n  // --------------------------- handleChange\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    })\n  }\n\n  // --------------------------- handleEditSubmit\n  handleEditSubmit = (evt) => {\n    evt.preventDefault();\n\n    if (this.state.taskFormInput.length) {\n      this.props.editTask(this.props.id, this.state.taskFormInput);\n    }\n    \n    this.setState({isEditing: false});\n  }\n\n  // --------------------------- handleMovePrev\n  handleMovePrev = () => this.props.moveTask(this.props.id, this.props.status, -1);\n  // --------------------------- handleMoveNext\n  handleMoveNext = () => this.props.moveTask(this.props.id, this.props.status, 1);\n\n  // --------------------------- removeTask\n  removeTask = () => this.props.removeTask(this.props.id);\n  \n  // --------------------------- toggleEdit\n  toggleEdit = () => {\n    // check if taskFormInput has a value (not cleared by user)\n    this.state.taskFormInput \n      ? this.setState({ isEditing: !this.state.isEditing }) \n      \n      // if empty, reset state with task value handed down in prop\n      : this.setState({\n          isEditing: !this.state.isEditing,\n          taskFormInput: this.props.task\n        });\n  } \n\n  // --------------------------- clearTask\n  clearTask = () => { this.setState({taskFormInput: \"\"}); }\n\n  // --------------------------- render\n  render() {\n\n    const { id, task, status } = this.props;\n  \n    return(\n      <li className={`taskItem taskItem--${status}`} >\n      \n      {\n        // If status is 'open' DO NOT render the \"previous\" status button\n        status !== 'open' \n        &&\n        <>\n          <label htmlFor={`btnPrev--${id}`} className=\"srOnly\">Move task to the previous status</label>\n          <button id={`btnPrev--${id}`} className=\"taskItem__btn taskItem__btn--prev\" onClick={this.handleMovePrev}>\n            <FontAwesomeIcon icon={faChevronLeft} aria-hidden=\"true\" />\n            <span className=\"srOnly\">Move task to the previous status</span>\n          </button>\n        </>\n      }\n    \n    { \n      // if not in editing mode render the task as text ... otherwise render the task form to edit the task\n      !this.state.isEditing \n        ? <>\n            <label htmlFor={`taskItem--${id}`} className=\"srOnly\">Click or focus on the text of the task to enter edit mode and modify or delete the task</label>\n            <button id={`taskItem--${id}`} className=\"taskItem__text\" onClick={this.toggleEdit} onFocus={this.toggleEdit}>{task}</button> \n          </>\n        : <TaskForm \n            id={id}\n            type=\"edit\"\n            handleSubmit={this.handleEditSubmit} \n            handleBlur={this.handleBlur} \n            handleChange={this.handleChange}\n            taskValue={this.state.taskFormInput}\n            removeTask={this.removeTask}\n            toggleForm={this.toggleEdit}\n            handleClear={this.clearTask}\n          />\n    }\n      \n    {\n      // If status is 'complete' DO NOT render the \"next\" status button\n      status !== \"complete\" \n      &&\n      <>\n        <label htmlFor={`btnNext--${id}`} className=\"srOnly\">Move task to the previous status</label>\n        <button id={`btnNext--${id}`} className=\"taskItem__btn taskItem__btn--next\" onClick={this.handleMoveNext}>\n          <FontAwesomeIcon icon={faChevronRight} aria-hidden=\"true\"/>\n          <span className=\"srOnly\">Click to move task to the next status</span>\n        </button>\n      </>\n    }\n    </li>\n    ) \n  }\n}\n\nexport default TaskItem;","import React, { Component } from 'react';\nimport TaskItem from './TaskItem';\nimport TaskForm from './TaskForm';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport autosize from 'autosize';\n\nclass TaskList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isStaging: false,\n      stagingTask: \"\",\n      menuEnabled: false\n    }\n  }\n\n  // --------------------------- componentDidUpdate\n  componentDidUpdate() {\n    const taskInput = document.querySelector(`#taskFormInput_${this.props.status}`);\n\n    // only go to the end of the text if the input is not already focused\n    if (taskInput && taskInput !== document.activeElement) {\n      // autosize the textarea height as needed\n      autosize(taskInput);\n\n      // set the cursor to the end of the text input by setting value to \"\" > focus > value back to state.stagingTask\n      taskInput.value = \"\";\n      // focus on the input\n      taskInput.focus();\n      // set the input value\n      taskInput.value = this.state.stagingTask;\n    } \n  }\n\n  // --------------------------- toggleMenuEnabled\n  toggleMenuEnabled = () => this.setState({menuEnabled: !this.state.menuEnabled});\n\n  // --------------------------- handleBlur\n  handleBlur = (evt) => {\n    // implementation from https://gist.github.com/pstoica/4323d3e6e37e8a23dd59\n    const currentTarget = evt.currentTarget;\n\n    // Check the newly focused element in the next tick of the event loop\n    setTimeout(() => {\n      // Check if the new activeElement is a child of the original container\n      if (!currentTarget.contains(document.activeElement)) {\n        // if new focused element is not contained in the form ... toggle out of staging a task\n        this.setState({isStaging: false});\n      }\n    }, 0);\n  }\n\n  // --------------------------- handleStagingTask\n  handleStagingTask = (e) => this.setState({stagingTask: e.target.value});\n  // --------------------------- toggleTaskStaging\n  toggleTaskStaging = () => this.setState({isStaging: !this.state.isStaging});\n\n  // --------------------------- handleAddTask\n  handleAddTask = (e) => {\n    e.preventDefault();\n\n    // prevent adding empty tasks\n    if (this.state.stagingTask) {\n\n      const { stagingTask: task } = this.state;\n      const { status } = this.props;\n\n      // add task\n      this.props.addTask({\n        task,\n        status\n      })\n\n      // reset staging states\n      this.setState({\n        isStaging: false, \n        stagingTask: \"\",\n      });\n    }\n    \n  }\n\n  // --------------------------- handleClearList\n  handleClearList = () => {\n    const { tasks, status, clearTaskList } = this.props;\n    \n    // if task lst has items\n    if (tasks.length) {\n\n      // filter out the full task items list to those with the status of the task list\n      const taskListItems = \n      tasks\n        .filter(task => task.status === status)\n        // create an object with the keys of the task list items with a null value\n        .reduce(((deleteList, taskItem) => { \n          deleteList[taskItem.key] = null;\n          return deleteList;\n        }), {});\n      // remove the filtered items from firebase\n      clearTaskList(taskListItems, status)  \n    }\n    // toggle tasklist menu to false\n    this.setState({menuEnabled: false});\n  }\n\n  // clear stagingTask state\n  clearStagingTask = () => { this.setState({stagingTask: \"\"}); }\n  \n  // --------------------------- render\n  render() {\n    const { status, tasks, editTask, removeTask, moveTask } = this.props;\n\n     // heading text for task status lists\n    const statusString = {\n      open: \"Open\",\n      inProgress: \"In Progress\",\n      complete: \"Completed\"\n    }\n\n    return(\n      <div className=\"taskList\">\n        <div className={`taskList__header taskList__header--${status}`}>\n          <label htmlFor={`taskListMenuBtn--${status}`} className=\"srOnly\">Click the button to toggle the task list menu to clear the task list's items</label>\n          <button \n            id={`taskListMenuBtn--${status}`} className={this.state.menuEnabled ? \"btn taskList__menuBtn taskList__menuBtn--active\" : \"btn taskList__menuBtn\" } \n            onClick={this.toggleMenuEnabled}>\n              <span className=\"srOnly\">Toggle the task list's menu</span>\n            {!this.state.menuEnabled ? <FontAwesomeIcon icon={faBars} /> : <FontAwesomeIcon icon={faTimes} /> }  \n          </button>\n          \n          <h2 className=\"taskList__headingText\">\n            {/* Task List Name */}\n            {statusString[status]} \n            {/* Task List Item Counter */}\n            {tasks.length > 0 && <span className=\"taskList__count\">{tasks.length}</span>}\n          </h2>\n\n          {\n            // Toggle task list header icon depending if the menuEnabled is true\n            !this.state.menuEnabled \n            ? \n            <>\n              <label htmlFor={`taskListAddBtn--${status}`} className=\"srOnly\">Click the button to toggle the add new task form</label>\n              <button id={`taskListAddBtn--${status}`} onClick={this.toggleTaskStaging} className={`btn taskList__addBtn`} disabled={this.state.isStaging ? 'disabled' : ''}>+ Task</button>\n            </>\n            : \n            <>\n              <label htmlFor={`taskListClearBtn--${status}`} className=\"srOnly\">Click the button to clear the task list's items</label>\n              <button id={`taskListClearBtn--${status}`} onClick={this.handleClearList} className={`btn btn--black taskList__clearBtn`} disabled={tasks.length ? '' : 'disabled' }>Clear List</button>\n            </>\n          }\n          \n          \n        </div>\n        <ul className=\"taskList__list\">\n          { \n          // render a TaskForm to add a new task for the task list\n            this.state.isStaging && \n            <li className={`taskItem taskItem--${status}`}>\n              <TaskForm \n                id={status}\n                taskValue={this.state.stagingTask}\n                handleSubmit={this.handleAddTask}\n                toggleForm={this.toggleTaskStaging}\n                handleBlur={this.handleBlur}\n                handleChange={this.handleStagingTask}\n                handleClear={this.clearStagingTask}\n              />\n            </li>\n          }\n          { \n          // render the taskform items for the list\n            this.props.tasks.map(({key, task, status}) => (\n              <TaskItem \n                key={key} \n                id={key} \n                task={task} \n                status={status} \n                editTask={editTask}\n                removeTask={removeTask} \n                moveTask={moveTask} />)\n            )\n          }\n        </ul>\n      </div>\n    )\n\n  }\n\n}\nexport default TaskList;","import React from 'react'\n\nconst Footer = () => (\n  <footer>\n    <div className=\"wrapper displayContainer\">\n      <p>Copyright 2020</p> \n      <p>Created By <a href=\"https://andrefacey.com\">Andre Facey</a> at <a href=\"https://junocollege.com\" target=\"_blank\" rel=\"noopener noreferrer\">Juno College</a></p>\n      <p>Design Inspiration from <a href=\"https://scottrs.ca\" target=\"_blank\" rel=\"noopener noreferrer\">Scott Sobere-Yu</a> and <a href=\"https://dribbble.com/shots/6250762-Kanban-Board\" target=\"_blank\" rel=\"noopener noreferrer\">Nikita</a></p>\n    </div>\n  </footer>\n);\n\nexport default Footer;","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport Swal from \"sweetalert2\";\nimport Header from './components/Header.js';\nimport TaskBoardMenu from './components/TaskBoardMenu.js';\nimport TaskList from './components/TaskList.js';\nimport Footer from './components/Footer.js';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n      loadComplete: false,\n      user: null,\n      dbRef: \"public/\",\n      taskStatus: ['open', 'inProgress', 'complete'],\n      taskItems: [],\n      listFilter: \"all\",\n      searchTerms: \"\",\n      searchItems: []\n    }\n  }\n\n  // --------------------------- componentDidMount\n  componentDidMount() {\n    \n    // check if there is a signed in user\n    firebase.auth().onAuthStateChanged(user => {\n      user\n        // if there is a user signed in, update state with the id, and user's dbRef\n        ? this.setState({user: user.uid, dbRef: user.uid + \"/\"}, this.retrieveTaskItems)\n        // else retrieve the task items from the default non-authenticated dbRef\n        : this.retrieveTaskItems();\n    })\n  }\n  \n  // --------------------------- signInUser (Google Auth)\n\n  signInUser = () => {\n    // create new google auth provider\n    const provider = new firebase.auth.GoogleAuthProvider();\n    \n    // initiate sign in with popup using google auth\n    firebase.auth().signInWithPopup(provider)\n      .then(({user}) => {\n        // once user is signed in, set user info and user's dbRef in state\n        this.setState({\n          user: user.uid,\n          dbRef: user.uid + \"/\",\n        });\n      })\n      .catch(error => {\n        // if there is an error, display an alert\n        Swal.fire({\n          title: \"Oops!\",\n          text: \"There was an error signing in: \" + error,\n          icon: \"error\",\n          confirmButton: \"OK\"\n        })\n      })\n  }\n\n  // --------------------------- logoutUser\n  logoutUser = () => {\n    firebase.auth().signOut()\n      .then(() => {\n        // once user is logged out, reset user and dbRef in state\n        this.setState({user: null, dbRef: \"public/\"}, this.retrieveTaskItems)\n      })\n      .catch(error => {\n        // if there is an error, display an alert\n        Swal.fire({\n          title: \"Oops!\",\n          text: \"There was an error while logging out: \", error,\n          icon: \"error\",\n          confirmButton: \"OK\"\n        })\n      })\n  }\n\n  // --------------------------- retrieveTaskItems\n  retrieveTaskItems = () => {\n    // db reference of \"tasks\"\n    const dbRef = firebase.database().ref(this.state.dbRef);\n  \n    // listener for any value change on the db reference\n    dbRef.on('value', response => {\n      const tasksData = response.val();\n      \n      // create empty array to store data retrieved from db later\n      const taskItems = [];\n      for (const key in tasksData) {\n        const taskItem = {\n          key: key,\n          task: tasksData[key].task,\n          status: tasksData[key].status\n        }\n        taskItems.push(taskItem);\n      }\n      \n      // update state with the taskItems retrieved from the database\n      this.setState({taskItems}, () => this.setState({loadComplete: true}));\n    })\n    \n\n  }\n\n  // --------------------------- clearTaskboard\n  clearTaskboard = () => {\n    // remove all items in firebase\n    firebase.database().ref(this.state.dbRef).remove();\n\n    // reset searchItems to empty\n    this.setState({searchItems: []})\n  }\n\n  // --------------------------- clearTaskList\n  clearTaskList = (taskListItems, status) => {\n    // pass an object of keys with null values to clear multiple items\n    firebase.database().ref(this.state.dbRef).update(taskListItems);\n\n    // update the searchItems with the filtered out items that may have been removed\n    const filterSearchItems = this.state.searchItems.filter(item => item.status !== status);\n    this.setState({searchItems: filterSearchItems})\n  }\n\n  // --------------------------- addTask\n  addTask = (newTask) => firebase.database().ref(this.state.dbRef).push(newTask);\n  \n  // --------------------------- updateTask\n  updateTask = (key, newValue) => firebase.database().ref(this.state.dbRef + key).update({task: newValue});\n\n  // --------------------------- removeTask\n  removeTask = (key) => firebase.database().ref(this.state.dbRef).child(key).remove();\n\n  // --------------------------- moveTask\n  moveTask = (key, status, direction) => {\n    const dbRef = firebase.database().ref(this.state.dbRef + key);\n    const { taskStatus } = this.state;\n\n    // find current status index\n    const currentIdx = taskStatus.indexOf(status);\n\n    // store new index as the value of currentIdx + the direction (1 or - 1)\n    let newIdx = currentIdx + direction;\n\n    // prevent out of range indexes of the taskStatus array\n    // if newIdx < 0 - set to 0, if newIdx gte taskStatus length - set to last item in array, otherwise keep the value\n    newIdx = newIdx < 0 ? 0 : newIdx >= taskStatus.length ? taskStatus.length - 1 : newIdx;\n\n    // if task has a new position update it in the database\n    if (newIdx !== currentIdx) {\n      dbRef.update({status: taskStatus[newIdx]})\n        // if there are searchTerms then update the task in the searchItems state\n        .then(() => this.state.searchTerms && this.handleSearch());\n    }\n  }\n\n  // --------------------------- handleChange\n  handleChange = (evt) => {\n    const { name, value } = evt.target;\n    \n    // call handleSearch if the input searchTerms input was changed and there are tasks\n    if (name === 'searchTerms' && this.state.taskItems.length) {\n      // set seachTerms state to value, and then call this.handleSearch\n      this.setState({[name]: value}, this.handleSearch);\n    }\n    else { \n      // otherwise update other inputs in state by their name and input value\n      this.setState({[name]: value});\n    }\n  }\n\n  // --------------------------- handleSearch\n  handleSearch = () => {\n    const { searchTerms, taskItems }= this.state;\n    // create regex for search terms - case insensistive\n    const searchString = new RegExp(searchTerms, 'i');\n\n    // filter out tasks by test against search terms\n    const searchItems = taskItems.filter(({task}) => searchString.test(task));\n\n    // store filtered results into searchItems state to preserve the state of the taskItems\n    this.setState({searchItems});\n  }\n\n  // --------------------------- handleSearch\n  clearSearch = () => { this.setState({searchTerms: \"\", searchItems: []}); }\n\n  // --------------------------- render\n  render() {\n    // methods\n    const { addTask, moveTask, removeTask, updateTask, handleChange, clearTaskboard, clearTaskList, clearSearch, signInUser, logoutUser } = this;\n    // state items\n    const { taskStatus, taskItems, listFilter, searchItems, searchTerms, user, loadComplete } = this.state;\n    \n    // if there are search terms, display the filtered searchItems, otherwise show all taskItems\n    const items = !searchTerms.length ? taskItems : searchItems;\n    // if a list has been filtered, only display items from that list\n    const lists = listFilter === 'all' ? taskStatus : [listFilter];\n\n    return (\n      <div className=\"pageContainer\">\n        {/* START of HEADER */}\n        <Header clearTaskboard={clearTaskboard} numOfTasks={taskItems.length} user={user} loadComplete={loadComplete} signInUser={signInUser} logoutUser={logoutUser} />\n        \n        {/* START of MAIN */}\n        <main>\n          <div className=\"wrapper\">\n            <TaskBoardMenu \n              handleChange={handleChange}\n              searchTerms={searchTerms}\n              clearSearch={clearSearch}\n            />\n            \n            <section className=\"taskLists\">\n              { \n                lists.map((status) => {\n                  const tasks = items.filter(task => task.status === status);\n                  return (\n                    <TaskList \n                      className=\"taskList\" \n                      key={status} \n                      status={status}\n                      tasks={tasks} \n                      addTask={addTask}\n                      moveTask={moveTask}\n                      removeTask={removeTask}\n                      editTask={updateTask}\n                      clearTaskList={clearTaskList}\n                    />\n                  )\n                })\n              } \n            </section>\n          </div>\n        </main>\n\n        {/* START of FOOTER */}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}