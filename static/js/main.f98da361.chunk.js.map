{"version":3,"sources":["firebase.js","TaskItem.js","TaskList.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","TaskItem","props","handleChange","evt","setState","target","id","value","handleEditSubmit","preventDefault","editTask","state","taskEdit","toggleEdit","removeTask","isEditing","task","this","status","className","onClick","moveTask","icon","faArrowLeft","action","onSubmit","type","name","onChange","autoComplete","faArrowRight","Component","TaskList","children","tasks","length","map","key","App","handleTaskChange","newTask","database","ref","child","remove","direction","dbRef","taskStatus","currentIdx","indexOf","newIdx","update","addTask","push","updateTask","newValue","taskItems","on","response","tasksData","val","taskItem","statusString","open","inProgress","complete","e","htmlFor","placeholder","idx","filter","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f98da361.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// *** USE YOUR CONFIG OBJECT ***\n// Initialize Firebase\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDBqq9f4CwQkWmvi0jA9or1uqWUTx73r_E\",\n  authDomain: \"andre-facey-project-five.firebaseapp.com\",\n  databaseURL: \"https://andre-facey-project-five.firebaseio.com\",\n  projectId: \"andre-facey-project-five\",\n  storageBucket: \"andre-facey-project-five.appspot.com\",\n  messagingSenderId: \"940406876843\",\n  appId: \"1:940406876843:web:d25925e9d0cc096f1b65ee\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React, { Component} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowLeft, faArrowRight } from '@fortawesome/free-solid-svg-icons'\n\nclass TaskItem extends Component {\n  constructor(props) {\n    super()\n\n    this.state = {\n      taskEdit: props.task,\n      isEditing: false\n    }\n  }\n\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.id]: evt.target.value\n    })\n  }\n\n  handleEditSubmit = (evt) => {\n    evt.preventDefault();\n    this.props.editTask(this.props.id, this.state.taskEdit);\n    this.toggleEdit();\n  }\n\n  removeTask = () => this.props.removeTask(this.props.id);\n  \n  toggleEdit = () => this.setState({isEditing: !this.state.isEditing})\n  render() {\n\n    const { id, task, status } = this.props;\n  \n    return(\n      <>\n        <li className=\"taskItem\">\n      { \n        status !== 'open' && <button className=\"btn__task btn__task--prev\" onClick={ () => this.props.moveTask(id, status, -1)}>\n        <FontAwesomeIcon icon={faArrowLeft} />\n        </button>\n      }\n      { \n        !this.state.isEditing ? task : \n        <>\n        <form action=\"#\" onSubmit={this.handleEditSubmit}>\n          {/* TODO remove autocomplete for submission */}\n          <input type=\"text\" id=\"taskEdit\" name=\"taskEdit\" onChange={this.handleChange} value={this.state.taskEdit} autoComplete=\"off\"/>\n          <button className=\"btn__task btn__task--save\">Save</button>\n          <button onClick={this.removeTask} className=\"btn__task btn__task--delete\">Delete</button>\n        </form>  \n      </>\n      }\n        <button className=\"btn__task btn__task--edit\" onClick={this.toggleEdit}>\n          {this.state.isEditing ? 'Cancel' : 'Edit'}\n        </button>\n      \n      { status !== 'complete' && <button className=\"btn__task btn__task--next\" onClick={ () => this.props.moveTask(id, status, 1)}>\n      <FontAwesomeIcon icon={faArrowRight} />\n        </button>}\n        </li>\n      </>\n  \n    ) \n  }\n}\n\nexport default TaskItem;","import React from 'react';\nimport TaskItem from './TaskItem';\n\nconst TaskList = props => {\n  return(\n    <div className=\"taskList\">\n      <h2 className={props.status + \" clearfix\"}>\n        {props.children} \n        {props.tasks.length > 0 && <span>({props.tasks.length})</span>}\n        <button className=\"btn__taskList\">+ Add Task</button>\n      </h2>\n      <ul className=\"\">\n        { \n          props.tasks.map(({key, task, status}) => (\n            <TaskItem \n              key={key} \n              id={key} \n              task={task} \n              status={status} \n              editTask={props.editTask}\n              removeTask={props.removeTask} \n              moveTask={props.moveTask} />)\n          )\n        }\n      </ul>\n    </div>\n  )\n}\n\nexport default TaskList;","import React, { Component } from 'react';\nimport firebase from './firebase.js'\nimport TaskList from './TaskList.js'\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n      newTask: \"\",\n      taskStatus: ['open', 'inProgress', 'complete'],\n      taskItems: []\n    }\n  }\n\n  // --------------------------- componentDidMount\n  componentDidMount() {\n    // db reference of \"tasks\"\n    const dbRef = firebase.database().ref(\"tasks\");\n\n    // listener for any value change on the db reference\n    dbRef.on('value', response => {\n      const tasksData = response.val();\n      \n      // create empty array to store data retrieved from db later\n      const taskItems = [];\n      for (const key in tasksData) {\n        const taskItem = {\n          key: key,\n          task: tasksData[key].task,\n          status: tasksData[key].status\n        }\n        taskItems.push(taskItem);\n      }\n      \n      // update state with the taskItems retrieved from the database\n      this.setState({taskItems});\n    });\n  }\n\n// --------------------------- handleTaskChange\n  // control input DOM changes in state\n  handleTaskChange = (evt) => this.setState({newTask: evt.target.value});\n\n  // --------------------------- removeTask\n  removeTask = (key) => {\n    const dbRef = firebase.database().ref('tasks');\n    dbRef.child(key).remove();\n  }\n// --------------------------- moveTask\n  moveTask = (key, status, direction) => {\n    const dbRef = firebase.database().ref('tasks/' + key);\n    const { taskStatus } = this.state;\n\n    // find current status index\n    const currentIdx = taskStatus.indexOf(status);\n\n    // store new index as the value of currentIdx + the direction (1 or - 1)\n    let newIdx = currentIdx + direction;\n\n    // prevent out of range indexes of the taskStatus array\n    // if newIdx < 0 - set to 0, if newIdx gte taskStatus length - set to last item in array, otherwise keep the value\n    newIdx = newIdx < 0 ? 0 : newIdx >= taskStatus.length ? taskStatus.length - 1 : newIdx;\n\n    // if task has a new position update it in the database\n    newIdx !== currentIdx && dbRef.update({status: taskStatus[newIdx]});\n  }\n// --------------------------- addTask\n  addTask = (evt) => {\n    evt.preventDefault();\n    const dbRef = firebase.database().ref(\"tasks\");\n    \n    // store new task in object to pushed to db later\n    const newTask = {\n      task: this.state.newTask,\n      status: this.state.taskStatus[0]\n    }\n\n    // push new task to the database\n    dbRef.push(newTask)\n    \n    // clear the add task input\n    this.setState({newTask: \"\"});\n  }\n\n// --------------------------- updateTask\n  updateTask = (key, newValue) => {\n    const dbRef = firebase.database().ref('tasks/' + key);\n    dbRef.update({task: newValue})\n  }\n\n// --------------------------- render\n  render() {\n    // heading text for task status lists\n    const statusString = {\n      open: \"Open\",\n      inProgress: \"In Progress\",\n      complete: \"Completed\"\n    }\n\n    return (\n      <div className=\"App\">\n        {/* START of HEADER */}\n        <header className=\"App-header\">\n          <div className=\"wrapper\">\n            <h1>Task Board</h1>\n            <form action=\"#\" onSubmit={(e) => this.addTask(e)}>\n              <label htmlFor=\"task\" className=\"sr-only\">Add A New Task</label>\n              {/* TODO remove autocomplete for submission */}\n              <input onChange={this.handleTaskChange} type=\"text\" name=\"task\" id=\"task\" placeholder=\"add a task\" value={this.state.newTask} autoComplete=\"off\"/>\n              <button>Add Task!</button>\n            </form>\n          </div>\n        </header>\n        \n        {/* START of MAIN */}\n        <main className=\"App-main\">\n          <div className=\"wrapper\">\n            <div className=\"taskLists\">\n              { \n                this.state.taskStatus.map((status, idx) => {\n                  const tasks = this.state.taskItems.filter(task => task.status === status);\n                  return (\n                    <TaskList \n                      className=\"taskList\" \n                      key={idx} \n                      status={status}\n                      tasks={tasks} \n                      moveTask={this.moveTask}\n                      removeTask={this.removeTask}\n                      editTask={this.updateTask}\n                    >\n                      {statusString[status]}\n                    </TaskList>\n                  )\n                })\n              } \n            </div>\n          </div>\n        </main>\n\n        {/* START of FOOTER */}\n        <footer>\n          <div className=\"wrapper\">\n            <p>Copyright 2020 - Created By <a href=\"https://andrefacey.com\">Andre Facey</a> at <a href=\"https://junocollege.com\">Juno College</a> - Design Inspiration from <a href=\"https://dribbble.com/shots/6250762-Kanban-Board\">Nikita</a></p>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}